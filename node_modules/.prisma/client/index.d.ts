
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model usuario
 * 
 */
export type usuario = $Result.DefaultSelection<Prisma.$usuarioPayload>
/**
 * Model remedio
 * 
 */
export type remedio = $Result.DefaultSelection<Prisma.$remedioPayload>
/**
 * Model prescricao
 * 
 */
export type prescricao = $Result.DefaultSelection<Prisma.$prescricaoPayload>
/**
 * Model historico
 * 
 */
export type historico = $Result.DefaultSelection<Prisma.$historicoPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Usuarios
 * const usuarios = await prisma.usuario.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Usuarios
   * const usuarios = await prisma.usuario.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.usuario`: Exposes CRUD operations for the **usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.usuarioDelegate<ExtArgs>;

  /**
   * `prisma.remedio`: Exposes CRUD operations for the **remedio** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Remedios
    * const remedios = await prisma.remedio.findMany()
    * ```
    */
  get remedio(): Prisma.remedioDelegate<ExtArgs>;

  /**
   * `prisma.prescricao`: Exposes CRUD operations for the **prescricao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Prescricaos
    * const prescricaos = await prisma.prescricao.findMany()
    * ```
    */
  get prescricao(): Prisma.prescricaoDelegate<ExtArgs>;

  /**
   * `prisma.historico`: Exposes CRUD operations for the **historico** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Historicos
    * const historicos = await prisma.historico.findMany()
    * ```
    */
  get historico(): Prisma.historicoDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.19.1
   * Query Engine version: 69d742ee20b815d88e17e54db4a2a7a3b30324e3
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    usuario: 'usuario',
    remedio: 'remedio',
    prescricao: 'prescricao',
    historico: 'historico'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "usuario" | "remedio" | "prescricao" | "historico"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      usuario: {
        payload: Prisma.$usuarioPayload<ExtArgs>
        fields: Prisma.usuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usuarioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usuarioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          findFirst: {
            args: Prisma.usuarioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usuarioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          findMany: {
            args: Prisma.usuarioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>[]
          }
          create: {
            args: Prisma.usuarioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          createMany: {
            args: Prisma.usuarioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.usuarioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>[]
          }
          delete: {
            args: Prisma.usuarioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          update: {
            args: Prisma.usuarioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          deleteMany: {
            args: Prisma.usuarioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.usuarioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.usuarioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          aggregate: {
            args: Prisma.UsuarioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsuario>
          }
          groupBy: {
            args: Prisma.usuarioGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsuarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.usuarioCountArgs<ExtArgs>
            result: $Utils.Optional<UsuarioCountAggregateOutputType> | number
          }
        }
      }
      remedio: {
        payload: Prisma.$remedioPayload<ExtArgs>
        fields: Prisma.remedioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.remedioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$remedioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.remedioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$remedioPayload>
          }
          findFirst: {
            args: Prisma.remedioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$remedioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.remedioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$remedioPayload>
          }
          findMany: {
            args: Prisma.remedioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$remedioPayload>[]
          }
          create: {
            args: Prisma.remedioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$remedioPayload>
          }
          createMany: {
            args: Prisma.remedioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.remedioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$remedioPayload>[]
          }
          delete: {
            args: Prisma.remedioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$remedioPayload>
          }
          update: {
            args: Prisma.remedioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$remedioPayload>
          }
          deleteMany: {
            args: Prisma.remedioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.remedioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.remedioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$remedioPayload>
          }
          aggregate: {
            args: Prisma.RemedioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRemedio>
          }
          groupBy: {
            args: Prisma.remedioGroupByArgs<ExtArgs>
            result: $Utils.Optional<RemedioGroupByOutputType>[]
          }
          count: {
            args: Prisma.remedioCountArgs<ExtArgs>
            result: $Utils.Optional<RemedioCountAggregateOutputType> | number
          }
        }
      }
      prescricao: {
        payload: Prisma.$prescricaoPayload<ExtArgs>
        fields: Prisma.prescricaoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.prescricaoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$prescricaoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.prescricaoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$prescricaoPayload>
          }
          findFirst: {
            args: Prisma.prescricaoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$prescricaoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.prescricaoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$prescricaoPayload>
          }
          findMany: {
            args: Prisma.prescricaoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$prescricaoPayload>[]
          }
          create: {
            args: Prisma.prescricaoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$prescricaoPayload>
          }
          createMany: {
            args: Prisma.prescricaoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.prescricaoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$prescricaoPayload>[]
          }
          delete: {
            args: Prisma.prescricaoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$prescricaoPayload>
          }
          update: {
            args: Prisma.prescricaoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$prescricaoPayload>
          }
          deleteMany: {
            args: Prisma.prescricaoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.prescricaoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.prescricaoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$prescricaoPayload>
          }
          aggregate: {
            args: Prisma.PrescricaoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePrescricao>
          }
          groupBy: {
            args: Prisma.prescricaoGroupByArgs<ExtArgs>
            result: $Utils.Optional<PrescricaoGroupByOutputType>[]
          }
          count: {
            args: Prisma.prescricaoCountArgs<ExtArgs>
            result: $Utils.Optional<PrescricaoCountAggregateOutputType> | number
          }
        }
      }
      historico: {
        payload: Prisma.$historicoPayload<ExtArgs>
        fields: Prisma.historicoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.historicoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$historicoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.historicoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$historicoPayload>
          }
          findFirst: {
            args: Prisma.historicoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$historicoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.historicoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$historicoPayload>
          }
          findMany: {
            args: Prisma.historicoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$historicoPayload>[]
          }
          create: {
            args: Prisma.historicoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$historicoPayload>
          }
          createMany: {
            args: Prisma.historicoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.historicoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$historicoPayload>[]
          }
          delete: {
            args: Prisma.historicoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$historicoPayload>
          }
          update: {
            args: Prisma.historicoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$historicoPayload>
          }
          deleteMany: {
            args: Prisma.historicoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.historicoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.historicoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$historicoPayload>
          }
          aggregate: {
            args: Prisma.HistoricoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHistorico>
          }
          groupBy: {
            args: Prisma.historicoGroupByArgs<ExtArgs>
            result: $Utils.Optional<HistoricoGroupByOutputType>[]
          }
          count: {
            args: Prisma.historicoCountArgs<ExtArgs>
            result: $Utils.Optional<HistoricoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsuarioCountOutputType
   */

  export type UsuarioCountOutputType = {
    prescricao: number
  }

  export type UsuarioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    prescricao?: boolean | UsuarioCountOutputTypeCountPrescricaoArgs
  }

  // Custom InputTypes
  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     */
    select?: UsuarioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountPrescricaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: prescricaoWhereInput
  }


  /**
   * Count Type RemedioCountOutputType
   */

  export type RemedioCountOutputType = {
    prescricao: number
  }

  export type RemedioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    prescricao?: boolean | RemedioCountOutputTypeCountPrescricaoArgs
  }

  // Custom InputTypes
  /**
   * RemedioCountOutputType without action
   */
  export type RemedioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RemedioCountOutputType
     */
    select?: RemedioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RemedioCountOutputType without action
   */
  export type RemedioCountOutputTypeCountPrescricaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: prescricaoWhereInput
  }


  /**
   * Count Type PrescricaoCountOutputType
   */

  export type PrescricaoCountOutputType = {
    historico: number
  }

  export type PrescricaoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    historico?: boolean | PrescricaoCountOutputTypeCountHistoricoArgs
  }

  // Custom InputTypes
  /**
   * PrescricaoCountOutputType without action
   */
  export type PrescricaoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrescricaoCountOutputType
     */
    select?: PrescricaoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PrescricaoCountOutputType without action
   */
  export type PrescricaoCountOutputTypeCountHistoricoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: historicoWhereInput
  }


  /**
   * Models
   */

  /**
   * Model usuario
   */

  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioAvgAggregateOutputType = {
    id: number | null
  }

  export type UsuarioSumAggregateOutputType = {
    id: number | null
  }

  export type UsuarioMinAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    senha: string | null
    data: Date | null
    status: boolean | null
  }

  export type UsuarioMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    senha: string | null
    data: Date | null
    status: boolean | null
  }

  export type UsuarioCountAggregateOutputType = {
    id: number
    nome: number
    email: number
    senha: number
    data: number
    status: number
    _all: number
  }


  export type UsuarioAvgAggregateInputType = {
    id?: true
  }

  export type UsuarioSumAggregateInputType = {
    id?: true
  }

  export type UsuarioMinAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    data?: true
    status?: true
  }

  export type UsuarioMaxAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    data?: true
    status?: true
  }

  export type UsuarioCountAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    data?: true
    status?: true
    _all?: true
  }

  export type UsuarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which usuario to aggregate.
     */
    where?: usuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuarioOrderByWithRelationInput | usuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type usuarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usuarioWhereInput
    orderBy?: usuarioOrderByWithAggregationInput | usuarioOrderByWithAggregationInput[]
    by: UsuarioScalarFieldEnum[] | UsuarioScalarFieldEnum
    having?: usuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _avg?: UsuarioAvgAggregateInputType
    _sum?: UsuarioSumAggregateInputType
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }

  export type UsuarioGroupByOutputType = {
    id: number
    nome: string
    email: string
    senha: string
    data: Date
    status: boolean
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends usuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type usuarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    data?: boolean
    status?: boolean
    prescricao?: boolean | usuario$prescricaoArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuario"]>

  export type usuarioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    data?: boolean
    status?: boolean
  }, ExtArgs["result"]["usuario"]>

  export type usuarioSelectScalar = {
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    data?: boolean
    status?: boolean
  }

  export type usuarioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    prescricao?: boolean | usuario$prescricaoArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type usuarioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $usuarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "usuario"
    objects: {
      prescricao: Prisma.$prescricaoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      email: string
      senha: string
      data: Date
      status: boolean
    }, ExtArgs["result"]["usuario"]>
    composites: {}
  }

  type usuarioGetPayload<S extends boolean | null | undefined | usuarioDefaultArgs> = $Result.GetResult<Prisma.$usuarioPayload, S>

  type usuarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<usuarioFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface usuarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['usuario'], meta: { name: 'usuario' } }
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {usuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends usuarioFindUniqueArgs>(args: SelectSubset<T, usuarioFindUniqueArgs<ExtArgs>>): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Usuario that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {usuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends usuarioFindUniqueOrThrowArgs>(args: SelectSubset<T, usuarioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends usuarioFindFirstArgs>(args?: SelectSubset<T, usuarioFindFirstArgs<ExtArgs>>): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Usuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends usuarioFindFirstOrThrowArgs>(args?: SelectSubset<T, usuarioFindFirstOrThrowArgs<ExtArgs>>): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuarioWithIdOnly = await prisma.usuario.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends usuarioFindManyArgs>(args?: SelectSubset<T, usuarioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Usuario.
     * @param {usuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
     */
    create<T extends usuarioCreateArgs>(args: SelectSubset<T, usuarioCreateArgs<ExtArgs>>): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Usuarios.
     * @param {usuarioCreateManyArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends usuarioCreateManyArgs>(args?: SelectSubset<T, usuarioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Usuarios and returns the data saved in the database.
     * @param {usuarioCreateManyAndReturnArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Usuarios and only return the `id`
     * const usuarioWithIdOnly = await prisma.usuario.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends usuarioCreateManyAndReturnArgs>(args?: SelectSubset<T, usuarioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Usuario.
     * @param {usuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
     */
    delete<T extends usuarioDeleteArgs>(args: SelectSubset<T, usuarioDeleteArgs<ExtArgs>>): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Usuario.
     * @param {usuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends usuarioUpdateArgs>(args: SelectSubset<T, usuarioUpdateArgs<ExtArgs>>): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Usuarios.
     * @param {usuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends usuarioDeleteManyArgs>(args?: SelectSubset<T, usuarioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends usuarioUpdateManyArgs>(args: SelectSubset<T, usuarioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuario.
     * @param {usuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
     */
    upsert<T extends usuarioUpsertArgs>(args: SelectSubset<T, usuarioUpsertArgs<ExtArgs>>): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends usuarioCountArgs>(
      args?: Subset<T, usuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usuarioGroupByArgs['orderBy'] }
        : { orderBy?: usuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the usuario model
   */
  readonly fields: usuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usuarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    prescricao<T extends usuario$prescricaoArgs<ExtArgs> = {}>(args?: Subset<T, usuario$prescricaoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$prescricaoPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the usuario model
   */ 
  interface usuarioFieldRefs {
    readonly id: FieldRef<"usuario", 'Int'>
    readonly nome: FieldRef<"usuario", 'String'>
    readonly email: FieldRef<"usuario", 'String'>
    readonly senha: FieldRef<"usuario", 'String'>
    readonly data: FieldRef<"usuario", 'DateTime'>
    readonly status: FieldRef<"usuario", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * usuario findUnique
   */
  export type usuarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * Filter, which usuario to fetch.
     */
    where: usuarioWhereUniqueInput
  }

  /**
   * usuario findUniqueOrThrow
   */
  export type usuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * Filter, which usuario to fetch.
     */
    where: usuarioWhereUniqueInput
  }

  /**
   * usuario findFirst
   */
  export type usuarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * Filter, which usuario to fetch.
     */
    where?: usuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuarioOrderByWithRelationInput | usuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usuarios.
     */
    cursor?: usuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * usuario findFirstOrThrow
   */
  export type usuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * Filter, which usuario to fetch.
     */
    where?: usuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuarioOrderByWithRelationInput | usuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usuarios.
     */
    cursor?: usuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * usuario findMany
   */
  export type usuarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where?: usuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuarioOrderByWithRelationInput | usuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing usuarios.
     */
    cursor?: usuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * usuario create
   */
  export type usuarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * The data needed to create a usuario.
     */
    data: XOR<usuarioCreateInput, usuarioUncheckedCreateInput>
  }

  /**
   * usuario createMany
   */
  export type usuarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many usuarios.
     */
    data: usuarioCreateManyInput | usuarioCreateManyInput[]
  }

  /**
   * usuario createManyAndReturn
   */
  export type usuarioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many usuarios.
     */
    data: usuarioCreateManyInput | usuarioCreateManyInput[]
  }

  /**
   * usuario update
   */
  export type usuarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * The data needed to update a usuario.
     */
    data: XOR<usuarioUpdateInput, usuarioUncheckedUpdateInput>
    /**
     * Choose, which usuario to update.
     */
    where: usuarioWhereUniqueInput
  }

  /**
   * usuario updateMany
   */
  export type usuarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update usuarios.
     */
    data: XOR<usuarioUpdateManyMutationInput, usuarioUncheckedUpdateManyInput>
    /**
     * Filter which usuarios to update
     */
    where?: usuarioWhereInput
  }

  /**
   * usuario upsert
   */
  export type usuarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * The filter to search for the usuario to update in case it exists.
     */
    where: usuarioWhereUniqueInput
    /**
     * In case the usuario found by the `where` argument doesn't exist, create a new usuario with this data.
     */
    create: XOR<usuarioCreateInput, usuarioUncheckedCreateInput>
    /**
     * In case the usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usuarioUpdateInput, usuarioUncheckedUpdateInput>
  }

  /**
   * usuario delete
   */
  export type usuarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * Filter which usuario to delete.
     */
    where: usuarioWhereUniqueInput
  }

  /**
   * usuario deleteMany
   */
  export type usuarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which usuarios to delete
     */
    where?: usuarioWhereInput
  }

  /**
   * usuario.prescricao
   */
  export type usuario$prescricaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prescricao
     */
    select?: prescricaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: prescricaoInclude<ExtArgs> | null
    where?: prescricaoWhereInput
    orderBy?: prescricaoOrderByWithRelationInput | prescricaoOrderByWithRelationInput[]
    cursor?: prescricaoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PrescricaoScalarFieldEnum | PrescricaoScalarFieldEnum[]
  }

  /**
   * usuario without action
   */
  export type usuarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuarioInclude<ExtArgs> | null
  }


  /**
   * Model remedio
   */

  export type AggregateRemedio = {
    _count: RemedioCountAggregateOutputType | null
    _avg: RemedioAvgAggregateOutputType | null
    _sum: RemedioSumAggregateOutputType | null
    _min: RemedioMinAggregateOutputType | null
    _max: RemedioMaxAggregateOutputType | null
  }

  export type RemedioAvgAggregateOutputType = {
    id: number | null
  }

  export type RemedioSumAggregateOutputType = {
    id: number | null
  }

  export type RemedioMinAggregateOutputType = {
    id: number | null
    nome: string | null
    funcao: string | null
    dosagem: string | null
    status: boolean | null
  }

  export type RemedioMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    funcao: string | null
    dosagem: string | null
    status: boolean | null
  }

  export type RemedioCountAggregateOutputType = {
    id: number
    nome: number
    funcao: number
    dosagem: number
    status: number
    _all: number
  }


  export type RemedioAvgAggregateInputType = {
    id?: true
  }

  export type RemedioSumAggregateInputType = {
    id?: true
  }

  export type RemedioMinAggregateInputType = {
    id?: true
    nome?: true
    funcao?: true
    dosagem?: true
    status?: true
  }

  export type RemedioMaxAggregateInputType = {
    id?: true
    nome?: true
    funcao?: true
    dosagem?: true
    status?: true
  }

  export type RemedioCountAggregateInputType = {
    id?: true
    nome?: true
    funcao?: true
    dosagem?: true
    status?: true
    _all?: true
  }

  export type RemedioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which remedio to aggregate.
     */
    where?: remedioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of remedios to fetch.
     */
    orderBy?: remedioOrderByWithRelationInput | remedioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: remedioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` remedios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` remedios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned remedios
    **/
    _count?: true | RemedioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RemedioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RemedioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RemedioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RemedioMaxAggregateInputType
  }

  export type GetRemedioAggregateType<T extends RemedioAggregateArgs> = {
        [P in keyof T & keyof AggregateRemedio]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRemedio[P]>
      : GetScalarType<T[P], AggregateRemedio[P]>
  }




  export type remedioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: remedioWhereInput
    orderBy?: remedioOrderByWithAggregationInput | remedioOrderByWithAggregationInput[]
    by: RemedioScalarFieldEnum[] | RemedioScalarFieldEnum
    having?: remedioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RemedioCountAggregateInputType | true
    _avg?: RemedioAvgAggregateInputType
    _sum?: RemedioSumAggregateInputType
    _min?: RemedioMinAggregateInputType
    _max?: RemedioMaxAggregateInputType
  }

  export type RemedioGroupByOutputType = {
    id: number
    nome: string
    funcao: string
    dosagem: string
    status: boolean
    _count: RemedioCountAggregateOutputType | null
    _avg: RemedioAvgAggregateOutputType | null
    _sum: RemedioSumAggregateOutputType | null
    _min: RemedioMinAggregateOutputType | null
    _max: RemedioMaxAggregateOutputType | null
  }

  type GetRemedioGroupByPayload<T extends remedioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RemedioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RemedioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RemedioGroupByOutputType[P]>
            : GetScalarType<T[P], RemedioGroupByOutputType[P]>
        }
      >
    >


  export type remedioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    funcao?: boolean
    dosagem?: boolean
    status?: boolean
    prescricao?: boolean | remedio$prescricaoArgs<ExtArgs>
    _count?: boolean | RemedioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["remedio"]>

  export type remedioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    funcao?: boolean
    dosagem?: boolean
    status?: boolean
  }, ExtArgs["result"]["remedio"]>

  export type remedioSelectScalar = {
    id?: boolean
    nome?: boolean
    funcao?: boolean
    dosagem?: boolean
    status?: boolean
  }

  export type remedioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    prescricao?: boolean | remedio$prescricaoArgs<ExtArgs>
    _count?: boolean | RemedioCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type remedioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $remedioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "remedio"
    objects: {
      prescricao: Prisma.$prescricaoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      funcao: string
      dosagem: string
      status: boolean
    }, ExtArgs["result"]["remedio"]>
    composites: {}
  }

  type remedioGetPayload<S extends boolean | null | undefined | remedioDefaultArgs> = $Result.GetResult<Prisma.$remedioPayload, S>

  type remedioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<remedioFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RemedioCountAggregateInputType | true
    }

  export interface remedioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['remedio'], meta: { name: 'remedio' } }
    /**
     * Find zero or one Remedio that matches the filter.
     * @param {remedioFindUniqueArgs} args - Arguments to find a Remedio
     * @example
     * // Get one Remedio
     * const remedio = await prisma.remedio.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends remedioFindUniqueArgs>(args: SelectSubset<T, remedioFindUniqueArgs<ExtArgs>>): Prisma__remedioClient<$Result.GetResult<Prisma.$remedioPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Remedio that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {remedioFindUniqueOrThrowArgs} args - Arguments to find a Remedio
     * @example
     * // Get one Remedio
     * const remedio = await prisma.remedio.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends remedioFindUniqueOrThrowArgs>(args: SelectSubset<T, remedioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__remedioClient<$Result.GetResult<Prisma.$remedioPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Remedio that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {remedioFindFirstArgs} args - Arguments to find a Remedio
     * @example
     * // Get one Remedio
     * const remedio = await prisma.remedio.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends remedioFindFirstArgs>(args?: SelectSubset<T, remedioFindFirstArgs<ExtArgs>>): Prisma__remedioClient<$Result.GetResult<Prisma.$remedioPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Remedio that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {remedioFindFirstOrThrowArgs} args - Arguments to find a Remedio
     * @example
     * // Get one Remedio
     * const remedio = await prisma.remedio.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends remedioFindFirstOrThrowArgs>(args?: SelectSubset<T, remedioFindFirstOrThrowArgs<ExtArgs>>): Prisma__remedioClient<$Result.GetResult<Prisma.$remedioPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Remedios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {remedioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Remedios
     * const remedios = await prisma.remedio.findMany()
     * 
     * // Get first 10 Remedios
     * const remedios = await prisma.remedio.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const remedioWithIdOnly = await prisma.remedio.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends remedioFindManyArgs>(args?: SelectSubset<T, remedioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$remedioPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Remedio.
     * @param {remedioCreateArgs} args - Arguments to create a Remedio.
     * @example
     * // Create one Remedio
     * const Remedio = await prisma.remedio.create({
     *   data: {
     *     // ... data to create a Remedio
     *   }
     * })
     * 
     */
    create<T extends remedioCreateArgs>(args: SelectSubset<T, remedioCreateArgs<ExtArgs>>): Prisma__remedioClient<$Result.GetResult<Prisma.$remedioPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Remedios.
     * @param {remedioCreateManyArgs} args - Arguments to create many Remedios.
     * @example
     * // Create many Remedios
     * const remedio = await prisma.remedio.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends remedioCreateManyArgs>(args?: SelectSubset<T, remedioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Remedios and returns the data saved in the database.
     * @param {remedioCreateManyAndReturnArgs} args - Arguments to create many Remedios.
     * @example
     * // Create many Remedios
     * const remedio = await prisma.remedio.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Remedios and only return the `id`
     * const remedioWithIdOnly = await prisma.remedio.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends remedioCreateManyAndReturnArgs>(args?: SelectSubset<T, remedioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$remedioPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Remedio.
     * @param {remedioDeleteArgs} args - Arguments to delete one Remedio.
     * @example
     * // Delete one Remedio
     * const Remedio = await prisma.remedio.delete({
     *   where: {
     *     // ... filter to delete one Remedio
     *   }
     * })
     * 
     */
    delete<T extends remedioDeleteArgs>(args: SelectSubset<T, remedioDeleteArgs<ExtArgs>>): Prisma__remedioClient<$Result.GetResult<Prisma.$remedioPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Remedio.
     * @param {remedioUpdateArgs} args - Arguments to update one Remedio.
     * @example
     * // Update one Remedio
     * const remedio = await prisma.remedio.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends remedioUpdateArgs>(args: SelectSubset<T, remedioUpdateArgs<ExtArgs>>): Prisma__remedioClient<$Result.GetResult<Prisma.$remedioPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Remedios.
     * @param {remedioDeleteManyArgs} args - Arguments to filter Remedios to delete.
     * @example
     * // Delete a few Remedios
     * const { count } = await prisma.remedio.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends remedioDeleteManyArgs>(args?: SelectSubset<T, remedioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Remedios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {remedioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Remedios
     * const remedio = await prisma.remedio.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends remedioUpdateManyArgs>(args: SelectSubset<T, remedioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Remedio.
     * @param {remedioUpsertArgs} args - Arguments to update or create a Remedio.
     * @example
     * // Update or create a Remedio
     * const remedio = await prisma.remedio.upsert({
     *   create: {
     *     // ... data to create a Remedio
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Remedio we want to update
     *   }
     * })
     */
    upsert<T extends remedioUpsertArgs>(args: SelectSubset<T, remedioUpsertArgs<ExtArgs>>): Prisma__remedioClient<$Result.GetResult<Prisma.$remedioPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Remedios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {remedioCountArgs} args - Arguments to filter Remedios to count.
     * @example
     * // Count the number of Remedios
     * const count = await prisma.remedio.count({
     *   where: {
     *     // ... the filter for the Remedios we want to count
     *   }
     * })
    **/
    count<T extends remedioCountArgs>(
      args?: Subset<T, remedioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RemedioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Remedio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RemedioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RemedioAggregateArgs>(args: Subset<T, RemedioAggregateArgs>): Prisma.PrismaPromise<GetRemedioAggregateType<T>>

    /**
     * Group by Remedio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {remedioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends remedioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: remedioGroupByArgs['orderBy'] }
        : { orderBy?: remedioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, remedioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRemedioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the remedio model
   */
  readonly fields: remedioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for remedio.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__remedioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    prescricao<T extends remedio$prescricaoArgs<ExtArgs> = {}>(args?: Subset<T, remedio$prescricaoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$prescricaoPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the remedio model
   */ 
  interface remedioFieldRefs {
    readonly id: FieldRef<"remedio", 'Int'>
    readonly nome: FieldRef<"remedio", 'String'>
    readonly funcao: FieldRef<"remedio", 'String'>
    readonly dosagem: FieldRef<"remedio", 'String'>
    readonly status: FieldRef<"remedio", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * remedio findUnique
   */
  export type remedioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the remedio
     */
    select?: remedioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: remedioInclude<ExtArgs> | null
    /**
     * Filter, which remedio to fetch.
     */
    where: remedioWhereUniqueInput
  }

  /**
   * remedio findUniqueOrThrow
   */
  export type remedioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the remedio
     */
    select?: remedioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: remedioInclude<ExtArgs> | null
    /**
     * Filter, which remedio to fetch.
     */
    where: remedioWhereUniqueInput
  }

  /**
   * remedio findFirst
   */
  export type remedioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the remedio
     */
    select?: remedioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: remedioInclude<ExtArgs> | null
    /**
     * Filter, which remedio to fetch.
     */
    where?: remedioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of remedios to fetch.
     */
    orderBy?: remedioOrderByWithRelationInput | remedioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for remedios.
     */
    cursor?: remedioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` remedios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` remedios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of remedios.
     */
    distinct?: RemedioScalarFieldEnum | RemedioScalarFieldEnum[]
  }

  /**
   * remedio findFirstOrThrow
   */
  export type remedioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the remedio
     */
    select?: remedioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: remedioInclude<ExtArgs> | null
    /**
     * Filter, which remedio to fetch.
     */
    where?: remedioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of remedios to fetch.
     */
    orderBy?: remedioOrderByWithRelationInput | remedioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for remedios.
     */
    cursor?: remedioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` remedios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` remedios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of remedios.
     */
    distinct?: RemedioScalarFieldEnum | RemedioScalarFieldEnum[]
  }

  /**
   * remedio findMany
   */
  export type remedioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the remedio
     */
    select?: remedioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: remedioInclude<ExtArgs> | null
    /**
     * Filter, which remedios to fetch.
     */
    where?: remedioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of remedios to fetch.
     */
    orderBy?: remedioOrderByWithRelationInput | remedioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing remedios.
     */
    cursor?: remedioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` remedios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` remedios.
     */
    skip?: number
    distinct?: RemedioScalarFieldEnum | RemedioScalarFieldEnum[]
  }

  /**
   * remedio create
   */
  export type remedioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the remedio
     */
    select?: remedioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: remedioInclude<ExtArgs> | null
    /**
     * The data needed to create a remedio.
     */
    data: XOR<remedioCreateInput, remedioUncheckedCreateInput>
  }

  /**
   * remedio createMany
   */
  export type remedioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many remedios.
     */
    data: remedioCreateManyInput | remedioCreateManyInput[]
  }

  /**
   * remedio createManyAndReturn
   */
  export type remedioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the remedio
     */
    select?: remedioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many remedios.
     */
    data: remedioCreateManyInput | remedioCreateManyInput[]
  }

  /**
   * remedio update
   */
  export type remedioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the remedio
     */
    select?: remedioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: remedioInclude<ExtArgs> | null
    /**
     * The data needed to update a remedio.
     */
    data: XOR<remedioUpdateInput, remedioUncheckedUpdateInput>
    /**
     * Choose, which remedio to update.
     */
    where: remedioWhereUniqueInput
  }

  /**
   * remedio updateMany
   */
  export type remedioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update remedios.
     */
    data: XOR<remedioUpdateManyMutationInput, remedioUncheckedUpdateManyInput>
    /**
     * Filter which remedios to update
     */
    where?: remedioWhereInput
  }

  /**
   * remedio upsert
   */
  export type remedioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the remedio
     */
    select?: remedioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: remedioInclude<ExtArgs> | null
    /**
     * The filter to search for the remedio to update in case it exists.
     */
    where: remedioWhereUniqueInput
    /**
     * In case the remedio found by the `where` argument doesn't exist, create a new remedio with this data.
     */
    create: XOR<remedioCreateInput, remedioUncheckedCreateInput>
    /**
     * In case the remedio was found with the provided `where` argument, update it with this data.
     */
    update: XOR<remedioUpdateInput, remedioUncheckedUpdateInput>
  }

  /**
   * remedio delete
   */
  export type remedioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the remedio
     */
    select?: remedioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: remedioInclude<ExtArgs> | null
    /**
     * Filter which remedio to delete.
     */
    where: remedioWhereUniqueInput
  }

  /**
   * remedio deleteMany
   */
  export type remedioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which remedios to delete
     */
    where?: remedioWhereInput
  }

  /**
   * remedio.prescricao
   */
  export type remedio$prescricaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prescricao
     */
    select?: prescricaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: prescricaoInclude<ExtArgs> | null
    where?: prescricaoWhereInput
    orderBy?: prescricaoOrderByWithRelationInput | prescricaoOrderByWithRelationInput[]
    cursor?: prescricaoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PrescricaoScalarFieldEnum | PrescricaoScalarFieldEnum[]
  }

  /**
   * remedio without action
   */
  export type remedioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the remedio
     */
    select?: remedioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: remedioInclude<ExtArgs> | null
  }


  /**
   * Model prescricao
   */

  export type AggregatePrescricao = {
    _count: PrescricaoCountAggregateOutputType | null
    _avg: PrescricaoAvgAggregateOutputType | null
    _sum: PrescricaoSumAggregateOutputType | null
    _min: PrescricaoMinAggregateOutputType | null
    _max: PrescricaoMaxAggregateOutputType | null
  }

  export type PrescricaoAvgAggregateOutputType = {
    id: number | null
    idUsuario: number | null
    idRemedio: number | null
    frequencia: number | null
  }

  export type PrescricaoSumAggregateOutputType = {
    id: number | null
    idUsuario: number | null
    idRemedio: number | null
    frequencia: number | null
  }

  export type PrescricaoMinAggregateOutputType = {
    id: number | null
    idUsuario: number | null
    idRemedio: number | null
    observacao: string | null
    frequencia: number | null
    dataInicio: Date | null
    dataFim: Date | null
    status: boolean | null
  }

  export type PrescricaoMaxAggregateOutputType = {
    id: number | null
    idUsuario: number | null
    idRemedio: number | null
    observacao: string | null
    frequencia: number | null
    dataInicio: Date | null
    dataFim: Date | null
    status: boolean | null
  }

  export type PrescricaoCountAggregateOutputType = {
    id: number
    idUsuario: number
    idRemedio: number
    observacao: number
    frequencia: number
    dataInicio: number
    dataFim: number
    status: number
    _all: number
  }


  export type PrescricaoAvgAggregateInputType = {
    id?: true
    idUsuario?: true
    idRemedio?: true
    frequencia?: true
  }

  export type PrescricaoSumAggregateInputType = {
    id?: true
    idUsuario?: true
    idRemedio?: true
    frequencia?: true
  }

  export type PrescricaoMinAggregateInputType = {
    id?: true
    idUsuario?: true
    idRemedio?: true
    observacao?: true
    frequencia?: true
    dataInicio?: true
    dataFim?: true
    status?: true
  }

  export type PrescricaoMaxAggregateInputType = {
    id?: true
    idUsuario?: true
    idRemedio?: true
    observacao?: true
    frequencia?: true
    dataInicio?: true
    dataFim?: true
    status?: true
  }

  export type PrescricaoCountAggregateInputType = {
    id?: true
    idUsuario?: true
    idRemedio?: true
    observacao?: true
    frequencia?: true
    dataInicio?: true
    dataFim?: true
    status?: true
    _all?: true
  }

  export type PrescricaoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which prescricao to aggregate.
     */
    where?: prescricaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of prescricaos to fetch.
     */
    orderBy?: prescricaoOrderByWithRelationInput | prescricaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: prescricaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` prescricaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` prescricaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned prescricaos
    **/
    _count?: true | PrescricaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PrescricaoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PrescricaoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PrescricaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PrescricaoMaxAggregateInputType
  }

  export type GetPrescricaoAggregateType<T extends PrescricaoAggregateArgs> = {
        [P in keyof T & keyof AggregatePrescricao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePrescricao[P]>
      : GetScalarType<T[P], AggregatePrescricao[P]>
  }




  export type prescricaoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: prescricaoWhereInput
    orderBy?: prescricaoOrderByWithAggregationInput | prescricaoOrderByWithAggregationInput[]
    by: PrescricaoScalarFieldEnum[] | PrescricaoScalarFieldEnum
    having?: prescricaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PrescricaoCountAggregateInputType | true
    _avg?: PrescricaoAvgAggregateInputType
    _sum?: PrescricaoSumAggregateInputType
    _min?: PrescricaoMinAggregateInputType
    _max?: PrescricaoMaxAggregateInputType
  }

  export type PrescricaoGroupByOutputType = {
    id: number
    idUsuario: number
    idRemedio: number
    observacao: string | null
    frequencia: number
    dataInicio: Date
    dataFim: Date
    status: boolean
    _count: PrescricaoCountAggregateOutputType | null
    _avg: PrescricaoAvgAggregateOutputType | null
    _sum: PrescricaoSumAggregateOutputType | null
    _min: PrescricaoMinAggregateOutputType | null
    _max: PrescricaoMaxAggregateOutputType | null
  }

  type GetPrescricaoGroupByPayload<T extends prescricaoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PrescricaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PrescricaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PrescricaoGroupByOutputType[P]>
            : GetScalarType<T[P], PrescricaoGroupByOutputType[P]>
        }
      >
    >


  export type prescricaoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    idUsuario?: boolean
    idRemedio?: boolean
    observacao?: boolean
    frequencia?: boolean
    dataInicio?: boolean
    dataFim?: boolean
    status?: boolean
    usuario?: boolean | usuarioDefaultArgs<ExtArgs>
    remedio?: boolean | remedioDefaultArgs<ExtArgs>
    historico?: boolean | prescricao$historicoArgs<ExtArgs>
    _count?: boolean | PrescricaoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["prescricao"]>

  export type prescricaoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    idUsuario?: boolean
    idRemedio?: boolean
    observacao?: boolean
    frequencia?: boolean
    dataInicio?: boolean
    dataFim?: boolean
    status?: boolean
    usuario?: boolean | usuarioDefaultArgs<ExtArgs>
    remedio?: boolean | remedioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["prescricao"]>

  export type prescricaoSelectScalar = {
    id?: boolean
    idUsuario?: boolean
    idRemedio?: boolean
    observacao?: boolean
    frequencia?: boolean
    dataInicio?: boolean
    dataFim?: boolean
    status?: boolean
  }

  export type prescricaoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | usuarioDefaultArgs<ExtArgs>
    remedio?: boolean | remedioDefaultArgs<ExtArgs>
    historico?: boolean | prescricao$historicoArgs<ExtArgs>
    _count?: boolean | PrescricaoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type prescricaoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | usuarioDefaultArgs<ExtArgs>
    remedio?: boolean | remedioDefaultArgs<ExtArgs>
  }

  export type $prescricaoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "prescricao"
    objects: {
      usuario: Prisma.$usuarioPayload<ExtArgs>
      remedio: Prisma.$remedioPayload<ExtArgs>
      historico: Prisma.$historicoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      idUsuario: number
      idRemedio: number
      observacao: string | null
      frequencia: number
      dataInicio: Date
      dataFim: Date
      status: boolean
    }, ExtArgs["result"]["prescricao"]>
    composites: {}
  }

  type prescricaoGetPayload<S extends boolean | null | undefined | prescricaoDefaultArgs> = $Result.GetResult<Prisma.$prescricaoPayload, S>

  type prescricaoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<prescricaoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PrescricaoCountAggregateInputType | true
    }

  export interface prescricaoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['prescricao'], meta: { name: 'prescricao' } }
    /**
     * Find zero or one Prescricao that matches the filter.
     * @param {prescricaoFindUniqueArgs} args - Arguments to find a Prescricao
     * @example
     * // Get one Prescricao
     * const prescricao = await prisma.prescricao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends prescricaoFindUniqueArgs>(args: SelectSubset<T, prescricaoFindUniqueArgs<ExtArgs>>): Prisma__prescricaoClient<$Result.GetResult<Prisma.$prescricaoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Prescricao that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {prescricaoFindUniqueOrThrowArgs} args - Arguments to find a Prescricao
     * @example
     * // Get one Prescricao
     * const prescricao = await prisma.prescricao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends prescricaoFindUniqueOrThrowArgs>(args: SelectSubset<T, prescricaoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__prescricaoClient<$Result.GetResult<Prisma.$prescricaoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Prescricao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {prescricaoFindFirstArgs} args - Arguments to find a Prescricao
     * @example
     * // Get one Prescricao
     * const prescricao = await prisma.prescricao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends prescricaoFindFirstArgs>(args?: SelectSubset<T, prescricaoFindFirstArgs<ExtArgs>>): Prisma__prescricaoClient<$Result.GetResult<Prisma.$prescricaoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Prescricao that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {prescricaoFindFirstOrThrowArgs} args - Arguments to find a Prescricao
     * @example
     * // Get one Prescricao
     * const prescricao = await prisma.prescricao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends prescricaoFindFirstOrThrowArgs>(args?: SelectSubset<T, prescricaoFindFirstOrThrowArgs<ExtArgs>>): Prisma__prescricaoClient<$Result.GetResult<Prisma.$prescricaoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Prescricaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {prescricaoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Prescricaos
     * const prescricaos = await prisma.prescricao.findMany()
     * 
     * // Get first 10 Prescricaos
     * const prescricaos = await prisma.prescricao.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const prescricaoWithIdOnly = await prisma.prescricao.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends prescricaoFindManyArgs>(args?: SelectSubset<T, prescricaoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$prescricaoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Prescricao.
     * @param {prescricaoCreateArgs} args - Arguments to create a Prescricao.
     * @example
     * // Create one Prescricao
     * const Prescricao = await prisma.prescricao.create({
     *   data: {
     *     // ... data to create a Prescricao
     *   }
     * })
     * 
     */
    create<T extends prescricaoCreateArgs>(args: SelectSubset<T, prescricaoCreateArgs<ExtArgs>>): Prisma__prescricaoClient<$Result.GetResult<Prisma.$prescricaoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Prescricaos.
     * @param {prescricaoCreateManyArgs} args - Arguments to create many Prescricaos.
     * @example
     * // Create many Prescricaos
     * const prescricao = await prisma.prescricao.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends prescricaoCreateManyArgs>(args?: SelectSubset<T, prescricaoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Prescricaos and returns the data saved in the database.
     * @param {prescricaoCreateManyAndReturnArgs} args - Arguments to create many Prescricaos.
     * @example
     * // Create many Prescricaos
     * const prescricao = await prisma.prescricao.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Prescricaos and only return the `id`
     * const prescricaoWithIdOnly = await prisma.prescricao.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends prescricaoCreateManyAndReturnArgs>(args?: SelectSubset<T, prescricaoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$prescricaoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Prescricao.
     * @param {prescricaoDeleteArgs} args - Arguments to delete one Prescricao.
     * @example
     * // Delete one Prescricao
     * const Prescricao = await prisma.prescricao.delete({
     *   where: {
     *     // ... filter to delete one Prescricao
     *   }
     * })
     * 
     */
    delete<T extends prescricaoDeleteArgs>(args: SelectSubset<T, prescricaoDeleteArgs<ExtArgs>>): Prisma__prescricaoClient<$Result.GetResult<Prisma.$prescricaoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Prescricao.
     * @param {prescricaoUpdateArgs} args - Arguments to update one Prescricao.
     * @example
     * // Update one Prescricao
     * const prescricao = await prisma.prescricao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends prescricaoUpdateArgs>(args: SelectSubset<T, prescricaoUpdateArgs<ExtArgs>>): Prisma__prescricaoClient<$Result.GetResult<Prisma.$prescricaoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Prescricaos.
     * @param {prescricaoDeleteManyArgs} args - Arguments to filter Prescricaos to delete.
     * @example
     * // Delete a few Prescricaos
     * const { count } = await prisma.prescricao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends prescricaoDeleteManyArgs>(args?: SelectSubset<T, prescricaoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Prescricaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {prescricaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Prescricaos
     * const prescricao = await prisma.prescricao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends prescricaoUpdateManyArgs>(args: SelectSubset<T, prescricaoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Prescricao.
     * @param {prescricaoUpsertArgs} args - Arguments to update or create a Prescricao.
     * @example
     * // Update or create a Prescricao
     * const prescricao = await prisma.prescricao.upsert({
     *   create: {
     *     // ... data to create a Prescricao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Prescricao we want to update
     *   }
     * })
     */
    upsert<T extends prescricaoUpsertArgs>(args: SelectSubset<T, prescricaoUpsertArgs<ExtArgs>>): Prisma__prescricaoClient<$Result.GetResult<Prisma.$prescricaoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Prescricaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {prescricaoCountArgs} args - Arguments to filter Prescricaos to count.
     * @example
     * // Count the number of Prescricaos
     * const count = await prisma.prescricao.count({
     *   where: {
     *     // ... the filter for the Prescricaos we want to count
     *   }
     * })
    **/
    count<T extends prescricaoCountArgs>(
      args?: Subset<T, prescricaoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PrescricaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Prescricao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrescricaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PrescricaoAggregateArgs>(args: Subset<T, PrescricaoAggregateArgs>): Prisma.PrismaPromise<GetPrescricaoAggregateType<T>>

    /**
     * Group by Prescricao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {prescricaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends prescricaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: prescricaoGroupByArgs['orderBy'] }
        : { orderBy?: prescricaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, prescricaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPrescricaoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the prescricao model
   */
  readonly fields: prescricaoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for prescricao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__prescricaoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends usuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usuarioDefaultArgs<ExtArgs>>): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    remedio<T extends remedioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, remedioDefaultArgs<ExtArgs>>): Prisma__remedioClient<$Result.GetResult<Prisma.$remedioPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    historico<T extends prescricao$historicoArgs<ExtArgs> = {}>(args?: Subset<T, prescricao$historicoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$historicoPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the prescricao model
   */ 
  interface prescricaoFieldRefs {
    readonly id: FieldRef<"prescricao", 'Int'>
    readonly idUsuario: FieldRef<"prescricao", 'Int'>
    readonly idRemedio: FieldRef<"prescricao", 'Int'>
    readonly observacao: FieldRef<"prescricao", 'String'>
    readonly frequencia: FieldRef<"prescricao", 'Int'>
    readonly dataInicio: FieldRef<"prescricao", 'DateTime'>
    readonly dataFim: FieldRef<"prescricao", 'DateTime'>
    readonly status: FieldRef<"prescricao", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * prescricao findUnique
   */
  export type prescricaoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prescricao
     */
    select?: prescricaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: prescricaoInclude<ExtArgs> | null
    /**
     * Filter, which prescricao to fetch.
     */
    where: prescricaoWhereUniqueInput
  }

  /**
   * prescricao findUniqueOrThrow
   */
  export type prescricaoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prescricao
     */
    select?: prescricaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: prescricaoInclude<ExtArgs> | null
    /**
     * Filter, which prescricao to fetch.
     */
    where: prescricaoWhereUniqueInput
  }

  /**
   * prescricao findFirst
   */
  export type prescricaoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prescricao
     */
    select?: prescricaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: prescricaoInclude<ExtArgs> | null
    /**
     * Filter, which prescricao to fetch.
     */
    where?: prescricaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of prescricaos to fetch.
     */
    orderBy?: prescricaoOrderByWithRelationInput | prescricaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for prescricaos.
     */
    cursor?: prescricaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` prescricaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` prescricaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of prescricaos.
     */
    distinct?: PrescricaoScalarFieldEnum | PrescricaoScalarFieldEnum[]
  }

  /**
   * prescricao findFirstOrThrow
   */
  export type prescricaoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prescricao
     */
    select?: prescricaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: prescricaoInclude<ExtArgs> | null
    /**
     * Filter, which prescricao to fetch.
     */
    where?: prescricaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of prescricaos to fetch.
     */
    orderBy?: prescricaoOrderByWithRelationInput | prescricaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for prescricaos.
     */
    cursor?: prescricaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` prescricaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` prescricaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of prescricaos.
     */
    distinct?: PrescricaoScalarFieldEnum | PrescricaoScalarFieldEnum[]
  }

  /**
   * prescricao findMany
   */
  export type prescricaoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prescricao
     */
    select?: prescricaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: prescricaoInclude<ExtArgs> | null
    /**
     * Filter, which prescricaos to fetch.
     */
    where?: prescricaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of prescricaos to fetch.
     */
    orderBy?: prescricaoOrderByWithRelationInput | prescricaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing prescricaos.
     */
    cursor?: prescricaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` prescricaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` prescricaos.
     */
    skip?: number
    distinct?: PrescricaoScalarFieldEnum | PrescricaoScalarFieldEnum[]
  }

  /**
   * prescricao create
   */
  export type prescricaoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prescricao
     */
    select?: prescricaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: prescricaoInclude<ExtArgs> | null
    /**
     * The data needed to create a prescricao.
     */
    data: XOR<prescricaoCreateInput, prescricaoUncheckedCreateInput>
  }

  /**
   * prescricao createMany
   */
  export type prescricaoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many prescricaos.
     */
    data: prescricaoCreateManyInput | prescricaoCreateManyInput[]
  }

  /**
   * prescricao createManyAndReturn
   */
  export type prescricaoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prescricao
     */
    select?: prescricaoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many prescricaos.
     */
    data: prescricaoCreateManyInput | prescricaoCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: prescricaoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * prescricao update
   */
  export type prescricaoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prescricao
     */
    select?: prescricaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: prescricaoInclude<ExtArgs> | null
    /**
     * The data needed to update a prescricao.
     */
    data: XOR<prescricaoUpdateInput, prescricaoUncheckedUpdateInput>
    /**
     * Choose, which prescricao to update.
     */
    where: prescricaoWhereUniqueInput
  }

  /**
   * prescricao updateMany
   */
  export type prescricaoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update prescricaos.
     */
    data: XOR<prescricaoUpdateManyMutationInput, prescricaoUncheckedUpdateManyInput>
    /**
     * Filter which prescricaos to update
     */
    where?: prescricaoWhereInput
  }

  /**
   * prescricao upsert
   */
  export type prescricaoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prescricao
     */
    select?: prescricaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: prescricaoInclude<ExtArgs> | null
    /**
     * The filter to search for the prescricao to update in case it exists.
     */
    where: prescricaoWhereUniqueInput
    /**
     * In case the prescricao found by the `where` argument doesn't exist, create a new prescricao with this data.
     */
    create: XOR<prescricaoCreateInput, prescricaoUncheckedCreateInput>
    /**
     * In case the prescricao was found with the provided `where` argument, update it with this data.
     */
    update: XOR<prescricaoUpdateInput, prescricaoUncheckedUpdateInput>
  }

  /**
   * prescricao delete
   */
  export type prescricaoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prescricao
     */
    select?: prescricaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: prescricaoInclude<ExtArgs> | null
    /**
     * Filter which prescricao to delete.
     */
    where: prescricaoWhereUniqueInput
  }

  /**
   * prescricao deleteMany
   */
  export type prescricaoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which prescricaos to delete
     */
    where?: prescricaoWhereInput
  }

  /**
   * prescricao.historico
   */
  export type prescricao$historicoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the historico
     */
    select?: historicoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: historicoInclude<ExtArgs> | null
    where?: historicoWhereInput
    orderBy?: historicoOrderByWithRelationInput | historicoOrderByWithRelationInput[]
    cursor?: historicoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HistoricoScalarFieldEnum | HistoricoScalarFieldEnum[]
  }

  /**
   * prescricao without action
   */
  export type prescricaoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prescricao
     */
    select?: prescricaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: prescricaoInclude<ExtArgs> | null
  }


  /**
   * Model historico
   */

  export type AggregateHistorico = {
    _count: HistoricoCountAggregateOutputType | null
    _avg: HistoricoAvgAggregateOutputType | null
    _sum: HistoricoSumAggregateOutputType | null
    _min: HistoricoMinAggregateOutputType | null
    _max: HistoricoMaxAggregateOutputType | null
  }

  export type HistoricoAvgAggregateOutputType = {
    id: number | null
    idPrescricao: number | null
  }

  export type HistoricoSumAggregateOutputType = {
    id: number | null
    idPrescricao: number | null
  }

  export type HistoricoMinAggregateOutputType = {
    id: number | null
    idPrescricao: number | null
    dataAtual: Date | null
    status: boolean | null
  }

  export type HistoricoMaxAggregateOutputType = {
    id: number | null
    idPrescricao: number | null
    dataAtual: Date | null
    status: boolean | null
  }

  export type HistoricoCountAggregateOutputType = {
    id: number
    idPrescricao: number
    dataAtual: number
    status: number
    _all: number
  }


  export type HistoricoAvgAggregateInputType = {
    id?: true
    idPrescricao?: true
  }

  export type HistoricoSumAggregateInputType = {
    id?: true
    idPrescricao?: true
  }

  export type HistoricoMinAggregateInputType = {
    id?: true
    idPrescricao?: true
    dataAtual?: true
    status?: true
  }

  export type HistoricoMaxAggregateInputType = {
    id?: true
    idPrescricao?: true
    dataAtual?: true
    status?: true
  }

  export type HistoricoCountAggregateInputType = {
    id?: true
    idPrescricao?: true
    dataAtual?: true
    status?: true
    _all?: true
  }

  export type HistoricoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which historico to aggregate.
     */
    where?: historicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of historicos to fetch.
     */
    orderBy?: historicoOrderByWithRelationInput | historicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: historicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` historicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` historicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned historicos
    **/
    _count?: true | HistoricoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HistoricoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HistoricoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HistoricoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HistoricoMaxAggregateInputType
  }

  export type GetHistoricoAggregateType<T extends HistoricoAggregateArgs> = {
        [P in keyof T & keyof AggregateHistorico]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHistorico[P]>
      : GetScalarType<T[P], AggregateHistorico[P]>
  }




  export type historicoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: historicoWhereInput
    orderBy?: historicoOrderByWithAggregationInput | historicoOrderByWithAggregationInput[]
    by: HistoricoScalarFieldEnum[] | HistoricoScalarFieldEnum
    having?: historicoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HistoricoCountAggregateInputType | true
    _avg?: HistoricoAvgAggregateInputType
    _sum?: HistoricoSumAggregateInputType
    _min?: HistoricoMinAggregateInputType
    _max?: HistoricoMaxAggregateInputType
  }

  export type HistoricoGroupByOutputType = {
    id: number
    idPrescricao: number
    dataAtual: Date
    status: boolean
    _count: HistoricoCountAggregateOutputType | null
    _avg: HistoricoAvgAggregateOutputType | null
    _sum: HistoricoSumAggregateOutputType | null
    _min: HistoricoMinAggregateOutputType | null
    _max: HistoricoMaxAggregateOutputType | null
  }

  type GetHistoricoGroupByPayload<T extends historicoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HistoricoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HistoricoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HistoricoGroupByOutputType[P]>
            : GetScalarType<T[P], HistoricoGroupByOutputType[P]>
        }
      >
    >


  export type historicoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    idPrescricao?: boolean
    dataAtual?: boolean
    status?: boolean
    prescricao?: boolean | prescricaoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["historico"]>

  export type historicoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    idPrescricao?: boolean
    dataAtual?: boolean
    status?: boolean
    prescricao?: boolean | prescricaoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["historico"]>

  export type historicoSelectScalar = {
    id?: boolean
    idPrescricao?: boolean
    dataAtual?: boolean
    status?: boolean
  }

  export type historicoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    prescricao?: boolean | prescricaoDefaultArgs<ExtArgs>
  }
  export type historicoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    prescricao?: boolean | prescricaoDefaultArgs<ExtArgs>
  }

  export type $historicoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "historico"
    objects: {
      prescricao: Prisma.$prescricaoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      idPrescricao: number
      dataAtual: Date
      status: boolean
    }, ExtArgs["result"]["historico"]>
    composites: {}
  }

  type historicoGetPayload<S extends boolean | null | undefined | historicoDefaultArgs> = $Result.GetResult<Prisma.$historicoPayload, S>

  type historicoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<historicoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: HistoricoCountAggregateInputType | true
    }

  export interface historicoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['historico'], meta: { name: 'historico' } }
    /**
     * Find zero or one Historico that matches the filter.
     * @param {historicoFindUniqueArgs} args - Arguments to find a Historico
     * @example
     * // Get one Historico
     * const historico = await prisma.historico.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends historicoFindUniqueArgs>(args: SelectSubset<T, historicoFindUniqueArgs<ExtArgs>>): Prisma__historicoClient<$Result.GetResult<Prisma.$historicoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Historico that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {historicoFindUniqueOrThrowArgs} args - Arguments to find a Historico
     * @example
     * // Get one Historico
     * const historico = await prisma.historico.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends historicoFindUniqueOrThrowArgs>(args: SelectSubset<T, historicoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__historicoClient<$Result.GetResult<Prisma.$historicoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Historico that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {historicoFindFirstArgs} args - Arguments to find a Historico
     * @example
     * // Get one Historico
     * const historico = await prisma.historico.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends historicoFindFirstArgs>(args?: SelectSubset<T, historicoFindFirstArgs<ExtArgs>>): Prisma__historicoClient<$Result.GetResult<Prisma.$historicoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Historico that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {historicoFindFirstOrThrowArgs} args - Arguments to find a Historico
     * @example
     * // Get one Historico
     * const historico = await prisma.historico.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends historicoFindFirstOrThrowArgs>(args?: SelectSubset<T, historicoFindFirstOrThrowArgs<ExtArgs>>): Prisma__historicoClient<$Result.GetResult<Prisma.$historicoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Historicos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {historicoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Historicos
     * const historicos = await prisma.historico.findMany()
     * 
     * // Get first 10 Historicos
     * const historicos = await prisma.historico.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const historicoWithIdOnly = await prisma.historico.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends historicoFindManyArgs>(args?: SelectSubset<T, historicoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$historicoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Historico.
     * @param {historicoCreateArgs} args - Arguments to create a Historico.
     * @example
     * // Create one Historico
     * const Historico = await prisma.historico.create({
     *   data: {
     *     // ... data to create a Historico
     *   }
     * })
     * 
     */
    create<T extends historicoCreateArgs>(args: SelectSubset<T, historicoCreateArgs<ExtArgs>>): Prisma__historicoClient<$Result.GetResult<Prisma.$historicoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Historicos.
     * @param {historicoCreateManyArgs} args - Arguments to create many Historicos.
     * @example
     * // Create many Historicos
     * const historico = await prisma.historico.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends historicoCreateManyArgs>(args?: SelectSubset<T, historicoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Historicos and returns the data saved in the database.
     * @param {historicoCreateManyAndReturnArgs} args - Arguments to create many Historicos.
     * @example
     * // Create many Historicos
     * const historico = await prisma.historico.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Historicos and only return the `id`
     * const historicoWithIdOnly = await prisma.historico.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends historicoCreateManyAndReturnArgs>(args?: SelectSubset<T, historicoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$historicoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Historico.
     * @param {historicoDeleteArgs} args - Arguments to delete one Historico.
     * @example
     * // Delete one Historico
     * const Historico = await prisma.historico.delete({
     *   where: {
     *     // ... filter to delete one Historico
     *   }
     * })
     * 
     */
    delete<T extends historicoDeleteArgs>(args: SelectSubset<T, historicoDeleteArgs<ExtArgs>>): Prisma__historicoClient<$Result.GetResult<Prisma.$historicoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Historico.
     * @param {historicoUpdateArgs} args - Arguments to update one Historico.
     * @example
     * // Update one Historico
     * const historico = await prisma.historico.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends historicoUpdateArgs>(args: SelectSubset<T, historicoUpdateArgs<ExtArgs>>): Prisma__historicoClient<$Result.GetResult<Prisma.$historicoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Historicos.
     * @param {historicoDeleteManyArgs} args - Arguments to filter Historicos to delete.
     * @example
     * // Delete a few Historicos
     * const { count } = await prisma.historico.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends historicoDeleteManyArgs>(args?: SelectSubset<T, historicoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Historicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {historicoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Historicos
     * const historico = await prisma.historico.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends historicoUpdateManyArgs>(args: SelectSubset<T, historicoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Historico.
     * @param {historicoUpsertArgs} args - Arguments to update or create a Historico.
     * @example
     * // Update or create a Historico
     * const historico = await prisma.historico.upsert({
     *   create: {
     *     // ... data to create a Historico
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Historico we want to update
     *   }
     * })
     */
    upsert<T extends historicoUpsertArgs>(args: SelectSubset<T, historicoUpsertArgs<ExtArgs>>): Prisma__historicoClient<$Result.GetResult<Prisma.$historicoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Historicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {historicoCountArgs} args - Arguments to filter Historicos to count.
     * @example
     * // Count the number of Historicos
     * const count = await prisma.historico.count({
     *   where: {
     *     // ... the filter for the Historicos we want to count
     *   }
     * })
    **/
    count<T extends historicoCountArgs>(
      args?: Subset<T, historicoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HistoricoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Historico.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoricoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HistoricoAggregateArgs>(args: Subset<T, HistoricoAggregateArgs>): Prisma.PrismaPromise<GetHistoricoAggregateType<T>>

    /**
     * Group by Historico.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {historicoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends historicoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: historicoGroupByArgs['orderBy'] }
        : { orderBy?: historicoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, historicoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHistoricoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the historico model
   */
  readonly fields: historicoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for historico.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__historicoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    prescricao<T extends prescricaoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, prescricaoDefaultArgs<ExtArgs>>): Prisma__prescricaoClient<$Result.GetResult<Prisma.$prescricaoPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the historico model
   */ 
  interface historicoFieldRefs {
    readonly id: FieldRef<"historico", 'Int'>
    readonly idPrescricao: FieldRef<"historico", 'Int'>
    readonly dataAtual: FieldRef<"historico", 'DateTime'>
    readonly status: FieldRef<"historico", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * historico findUnique
   */
  export type historicoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the historico
     */
    select?: historicoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: historicoInclude<ExtArgs> | null
    /**
     * Filter, which historico to fetch.
     */
    where: historicoWhereUniqueInput
  }

  /**
   * historico findUniqueOrThrow
   */
  export type historicoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the historico
     */
    select?: historicoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: historicoInclude<ExtArgs> | null
    /**
     * Filter, which historico to fetch.
     */
    where: historicoWhereUniqueInput
  }

  /**
   * historico findFirst
   */
  export type historicoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the historico
     */
    select?: historicoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: historicoInclude<ExtArgs> | null
    /**
     * Filter, which historico to fetch.
     */
    where?: historicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of historicos to fetch.
     */
    orderBy?: historicoOrderByWithRelationInput | historicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for historicos.
     */
    cursor?: historicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` historicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` historicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of historicos.
     */
    distinct?: HistoricoScalarFieldEnum | HistoricoScalarFieldEnum[]
  }

  /**
   * historico findFirstOrThrow
   */
  export type historicoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the historico
     */
    select?: historicoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: historicoInclude<ExtArgs> | null
    /**
     * Filter, which historico to fetch.
     */
    where?: historicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of historicos to fetch.
     */
    orderBy?: historicoOrderByWithRelationInput | historicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for historicos.
     */
    cursor?: historicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` historicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` historicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of historicos.
     */
    distinct?: HistoricoScalarFieldEnum | HistoricoScalarFieldEnum[]
  }

  /**
   * historico findMany
   */
  export type historicoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the historico
     */
    select?: historicoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: historicoInclude<ExtArgs> | null
    /**
     * Filter, which historicos to fetch.
     */
    where?: historicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of historicos to fetch.
     */
    orderBy?: historicoOrderByWithRelationInput | historicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing historicos.
     */
    cursor?: historicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` historicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` historicos.
     */
    skip?: number
    distinct?: HistoricoScalarFieldEnum | HistoricoScalarFieldEnum[]
  }

  /**
   * historico create
   */
  export type historicoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the historico
     */
    select?: historicoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: historicoInclude<ExtArgs> | null
    /**
     * The data needed to create a historico.
     */
    data: XOR<historicoCreateInput, historicoUncheckedCreateInput>
  }

  /**
   * historico createMany
   */
  export type historicoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many historicos.
     */
    data: historicoCreateManyInput | historicoCreateManyInput[]
  }

  /**
   * historico createManyAndReturn
   */
  export type historicoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the historico
     */
    select?: historicoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many historicos.
     */
    data: historicoCreateManyInput | historicoCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: historicoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * historico update
   */
  export type historicoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the historico
     */
    select?: historicoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: historicoInclude<ExtArgs> | null
    /**
     * The data needed to update a historico.
     */
    data: XOR<historicoUpdateInput, historicoUncheckedUpdateInput>
    /**
     * Choose, which historico to update.
     */
    where: historicoWhereUniqueInput
  }

  /**
   * historico updateMany
   */
  export type historicoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update historicos.
     */
    data: XOR<historicoUpdateManyMutationInput, historicoUncheckedUpdateManyInput>
    /**
     * Filter which historicos to update
     */
    where?: historicoWhereInput
  }

  /**
   * historico upsert
   */
  export type historicoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the historico
     */
    select?: historicoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: historicoInclude<ExtArgs> | null
    /**
     * The filter to search for the historico to update in case it exists.
     */
    where: historicoWhereUniqueInput
    /**
     * In case the historico found by the `where` argument doesn't exist, create a new historico with this data.
     */
    create: XOR<historicoCreateInput, historicoUncheckedCreateInput>
    /**
     * In case the historico was found with the provided `where` argument, update it with this data.
     */
    update: XOR<historicoUpdateInput, historicoUncheckedUpdateInput>
  }

  /**
   * historico delete
   */
  export type historicoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the historico
     */
    select?: historicoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: historicoInclude<ExtArgs> | null
    /**
     * Filter which historico to delete.
     */
    where: historicoWhereUniqueInput
  }

  /**
   * historico deleteMany
   */
  export type historicoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which historicos to delete
     */
    where?: historicoWhereInput
  }

  /**
   * historico without action
   */
  export type historicoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the historico
     */
    select?: historicoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: historicoInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsuarioScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    email: 'email',
    senha: 'senha',
    data: 'data',
    status: 'status'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const RemedioScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    funcao: 'funcao',
    dosagem: 'dosagem',
    status: 'status'
  };

  export type RemedioScalarFieldEnum = (typeof RemedioScalarFieldEnum)[keyof typeof RemedioScalarFieldEnum]


  export const PrescricaoScalarFieldEnum: {
    id: 'id',
    idUsuario: 'idUsuario',
    idRemedio: 'idRemedio',
    observacao: 'observacao',
    frequencia: 'frequencia',
    dataInicio: 'dataInicio',
    dataFim: 'dataFim',
    status: 'status'
  };

  export type PrescricaoScalarFieldEnum = (typeof PrescricaoScalarFieldEnum)[keyof typeof PrescricaoScalarFieldEnum]


  export const HistoricoScalarFieldEnum: {
    id: 'id',
    idPrescricao: 'idPrescricao',
    dataAtual: 'dataAtual',
    status: 'status'
  };

  export type HistoricoScalarFieldEnum = (typeof HistoricoScalarFieldEnum)[keyof typeof HistoricoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type usuarioWhereInput = {
    AND?: usuarioWhereInput | usuarioWhereInput[]
    OR?: usuarioWhereInput[]
    NOT?: usuarioWhereInput | usuarioWhereInput[]
    id?: IntFilter<"usuario"> | number
    nome?: StringFilter<"usuario"> | string
    email?: StringFilter<"usuario"> | string
    senha?: StringFilter<"usuario"> | string
    data?: DateTimeFilter<"usuario"> | Date | string
    status?: BoolFilter<"usuario"> | boolean
    prescricao?: PrescricaoListRelationFilter
  }

  export type usuarioOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    data?: SortOrder
    status?: SortOrder
    prescricao?: prescricaoOrderByRelationAggregateInput
  }

  export type usuarioWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: usuarioWhereInput | usuarioWhereInput[]
    OR?: usuarioWhereInput[]
    NOT?: usuarioWhereInput | usuarioWhereInput[]
    nome?: StringFilter<"usuario"> | string
    senha?: StringFilter<"usuario"> | string
    data?: DateTimeFilter<"usuario"> | Date | string
    status?: BoolFilter<"usuario"> | boolean
    prescricao?: PrescricaoListRelationFilter
  }, "id" | "email">

  export type usuarioOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    data?: SortOrder
    status?: SortOrder
    _count?: usuarioCountOrderByAggregateInput
    _avg?: usuarioAvgOrderByAggregateInput
    _max?: usuarioMaxOrderByAggregateInput
    _min?: usuarioMinOrderByAggregateInput
    _sum?: usuarioSumOrderByAggregateInput
  }

  export type usuarioScalarWhereWithAggregatesInput = {
    AND?: usuarioScalarWhereWithAggregatesInput | usuarioScalarWhereWithAggregatesInput[]
    OR?: usuarioScalarWhereWithAggregatesInput[]
    NOT?: usuarioScalarWhereWithAggregatesInput | usuarioScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"usuario"> | number
    nome?: StringWithAggregatesFilter<"usuario"> | string
    email?: StringWithAggregatesFilter<"usuario"> | string
    senha?: StringWithAggregatesFilter<"usuario"> | string
    data?: DateTimeWithAggregatesFilter<"usuario"> | Date | string
    status?: BoolWithAggregatesFilter<"usuario"> | boolean
  }

  export type remedioWhereInput = {
    AND?: remedioWhereInput | remedioWhereInput[]
    OR?: remedioWhereInput[]
    NOT?: remedioWhereInput | remedioWhereInput[]
    id?: IntFilter<"remedio"> | number
    nome?: StringFilter<"remedio"> | string
    funcao?: StringFilter<"remedio"> | string
    dosagem?: StringFilter<"remedio"> | string
    status?: BoolFilter<"remedio"> | boolean
    prescricao?: PrescricaoListRelationFilter
  }

  export type remedioOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    funcao?: SortOrder
    dosagem?: SortOrder
    status?: SortOrder
    prescricao?: prescricaoOrderByRelationAggregateInput
  }

  export type remedioWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: remedioWhereInput | remedioWhereInput[]
    OR?: remedioWhereInput[]
    NOT?: remedioWhereInput | remedioWhereInput[]
    nome?: StringFilter<"remedio"> | string
    funcao?: StringFilter<"remedio"> | string
    dosagem?: StringFilter<"remedio"> | string
    status?: BoolFilter<"remedio"> | boolean
    prescricao?: PrescricaoListRelationFilter
  }, "id">

  export type remedioOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    funcao?: SortOrder
    dosagem?: SortOrder
    status?: SortOrder
    _count?: remedioCountOrderByAggregateInput
    _avg?: remedioAvgOrderByAggregateInput
    _max?: remedioMaxOrderByAggregateInput
    _min?: remedioMinOrderByAggregateInput
    _sum?: remedioSumOrderByAggregateInput
  }

  export type remedioScalarWhereWithAggregatesInput = {
    AND?: remedioScalarWhereWithAggregatesInput | remedioScalarWhereWithAggregatesInput[]
    OR?: remedioScalarWhereWithAggregatesInput[]
    NOT?: remedioScalarWhereWithAggregatesInput | remedioScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"remedio"> | number
    nome?: StringWithAggregatesFilter<"remedio"> | string
    funcao?: StringWithAggregatesFilter<"remedio"> | string
    dosagem?: StringWithAggregatesFilter<"remedio"> | string
    status?: BoolWithAggregatesFilter<"remedio"> | boolean
  }

  export type prescricaoWhereInput = {
    AND?: prescricaoWhereInput | prescricaoWhereInput[]
    OR?: prescricaoWhereInput[]
    NOT?: prescricaoWhereInput | prescricaoWhereInput[]
    id?: IntFilter<"prescricao"> | number
    idUsuario?: IntFilter<"prescricao"> | number
    idRemedio?: IntFilter<"prescricao"> | number
    observacao?: StringNullableFilter<"prescricao"> | string | null
    frequencia?: IntFilter<"prescricao"> | number
    dataInicio?: DateTimeFilter<"prescricao"> | Date | string
    dataFim?: DateTimeFilter<"prescricao"> | Date | string
    status?: BoolFilter<"prescricao"> | boolean
    usuario?: XOR<UsuarioRelationFilter, usuarioWhereInput>
    remedio?: XOR<RemedioRelationFilter, remedioWhereInput>
    historico?: HistoricoListRelationFilter
  }

  export type prescricaoOrderByWithRelationInput = {
    id?: SortOrder
    idUsuario?: SortOrder
    idRemedio?: SortOrder
    observacao?: SortOrderInput | SortOrder
    frequencia?: SortOrder
    dataInicio?: SortOrder
    dataFim?: SortOrder
    status?: SortOrder
    usuario?: usuarioOrderByWithRelationInput
    remedio?: remedioOrderByWithRelationInput
    historico?: historicoOrderByRelationAggregateInput
  }

  export type prescricaoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: prescricaoWhereInput | prescricaoWhereInput[]
    OR?: prescricaoWhereInput[]
    NOT?: prescricaoWhereInput | prescricaoWhereInput[]
    idUsuario?: IntFilter<"prescricao"> | number
    idRemedio?: IntFilter<"prescricao"> | number
    observacao?: StringNullableFilter<"prescricao"> | string | null
    frequencia?: IntFilter<"prescricao"> | number
    dataInicio?: DateTimeFilter<"prescricao"> | Date | string
    dataFim?: DateTimeFilter<"prescricao"> | Date | string
    status?: BoolFilter<"prescricao"> | boolean
    usuario?: XOR<UsuarioRelationFilter, usuarioWhereInput>
    remedio?: XOR<RemedioRelationFilter, remedioWhereInput>
    historico?: HistoricoListRelationFilter
  }, "id">

  export type prescricaoOrderByWithAggregationInput = {
    id?: SortOrder
    idUsuario?: SortOrder
    idRemedio?: SortOrder
    observacao?: SortOrderInput | SortOrder
    frequencia?: SortOrder
    dataInicio?: SortOrder
    dataFim?: SortOrder
    status?: SortOrder
    _count?: prescricaoCountOrderByAggregateInput
    _avg?: prescricaoAvgOrderByAggregateInput
    _max?: prescricaoMaxOrderByAggregateInput
    _min?: prescricaoMinOrderByAggregateInput
    _sum?: prescricaoSumOrderByAggregateInput
  }

  export type prescricaoScalarWhereWithAggregatesInput = {
    AND?: prescricaoScalarWhereWithAggregatesInput | prescricaoScalarWhereWithAggregatesInput[]
    OR?: prescricaoScalarWhereWithAggregatesInput[]
    NOT?: prescricaoScalarWhereWithAggregatesInput | prescricaoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"prescricao"> | number
    idUsuario?: IntWithAggregatesFilter<"prescricao"> | number
    idRemedio?: IntWithAggregatesFilter<"prescricao"> | number
    observacao?: StringNullableWithAggregatesFilter<"prescricao"> | string | null
    frequencia?: IntWithAggregatesFilter<"prescricao"> | number
    dataInicio?: DateTimeWithAggregatesFilter<"prescricao"> | Date | string
    dataFim?: DateTimeWithAggregatesFilter<"prescricao"> | Date | string
    status?: BoolWithAggregatesFilter<"prescricao"> | boolean
  }

  export type historicoWhereInput = {
    AND?: historicoWhereInput | historicoWhereInput[]
    OR?: historicoWhereInput[]
    NOT?: historicoWhereInput | historicoWhereInput[]
    id?: IntFilter<"historico"> | number
    idPrescricao?: IntFilter<"historico"> | number
    dataAtual?: DateTimeFilter<"historico"> | Date | string
    status?: BoolFilter<"historico"> | boolean
    prescricao?: XOR<PrescricaoRelationFilter, prescricaoWhereInput>
  }

  export type historicoOrderByWithRelationInput = {
    id?: SortOrder
    idPrescricao?: SortOrder
    dataAtual?: SortOrder
    status?: SortOrder
    prescricao?: prescricaoOrderByWithRelationInput
  }

  export type historicoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: historicoWhereInput | historicoWhereInput[]
    OR?: historicoWhereInput[]
    NOT?: historicoWhereInput | historicoWhereInput[]
    idPrescricao?: IntFilter<"historico"> | number
    dataAtual?: DateTimeFilter<"historico"> | Date | string
    status?: BoolFilter<"historico"> | boolean
    prescricao?: XOR<PrescricaoRelationFilter, prescricaoWhereInput>
  }, "id">

  export type historicoOrderByWithAggregationInput = {
    id?: SortOrder
    idPrescricao?: SortOrder
    dataAtual?: SortOrder
    status?: SortOrder
    _count?: historicoCountOrderByAggregateInput
    _avg?: historicoAvgOrderByAggregateInput
    _max?: historicoMaxOrderByAggregateInput
    _min?: historicoMinOrderByAggregateInput
    _sum?: historicoSumOrderByAggregateInput
  }

  export type historicoScalarWhereWithAggregatesInput = {
    AND?: historicoScalarWhereWithAggregatesInput | historicoScalarWhereWithAggregatesInput[]
    OR?: historicoScalarWhereWithAggregatesInput[]
    NOT?: historicoScalarWhereWithAggregatesInput | historicoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"historico"> | number
    idPrescricao?: IntWithAggregatesFilter<"historico"> | number
    dataAtual?: DateTimeWithAggregatesFilter<"historico"> | Date | string
    status?: BoolWithAggregatesFilter<"historico"> | boolean
  }

  export type usuarioCreateInput = {
    nome: string
    email: string
    senha: string
    data: Date | string
    status?: boolean
    prescricao?: prescricaoCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioUncheckedCreateInput = {
    id?: number
    nome: string
    email: string
    senha: string
    data: Date | string
    status?: boolean
    prescricao?: prescricaoUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: BoolFieldUpdateOperationsInput | boolean
    prescricao?: prescricaoUpdateManyWithoutUsuarioNestedInput
  }

  export type usuarioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: BoolFieldUpdateOperationsInput | boolean
    prescricao?: prescricaoUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type usuarioCreateManyInput = {
    id?: number
    nome: string
    email: string
    senha: string
    data: Date | string
    status?: boolean
  }

  export type usuarioUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type usuarioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type remedioCreateInput = {
    nome: string
    funcao: string
    dosagem: string
    status?: boolean
    prescricao?: prescricaoCreateNestedManyWithoutRemedioInput
  }

  export type remedioUncheckedCreateInput = {
    id?: number
    nome: string
    funcao: string
    dosagem: string
    status?: boolean
    prescricao?: prescricaoUncheckedCreateNestedManyWithoutRemedioInput
  }

  export type remedioUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    funcao?: StringFieldUpdateOperationsInput | string
    dosagem?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    prescricao?: prescricaoUpdateManyWithoutRemedioNestedInput
  }

  export type remedioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    funcao?: StringFieldUpdateOperationsInput | string
    dosagem?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    prescricao?: prescricaoUncheckedUpdateManyWithoutRemedioNestedInput
  }

  export type remedioCreateManyInput = {
    id?: number
    nome: string
    funcao: string
    dosagem: string
    status?: boolean
  }

  export type remedioUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    funcao?: StringFieldUpdateOperationsInput | string
    dosagem?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type remedioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    funcao?: StringFieldUpdateOperationsInput | string
    dosagem?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type prescricaoCreateInput = {
    observacao?: string | null
    frequencia: number
    dataInicio: Date | string
    dataFim: Date | string
    status?: boolean
    usuario: usuarioCreateNestedOneWithoutPrescricaoInput
    remedio: remedioCreateNestedOneWithoutPrescricaoInput
    historico?: historicoCreateNestedManyWithoutPrescricaoInput
  }

  export type prescricaoUncheckedCreateInput = {
    id?: number
    idUsuario: number
    idRemedio: number
    observacao?: string | null
    frequencia: number
    dataInicio: Date | string
    dataFim: Date | string
    status?: boolean
    historico?: historicoUncheckedCreateNestedManyWithoutPrescricaoInput
  }

  export type prescricaoUpdateInput = {
    observacao?: NullableStringFieldUpdateOperationsInput | string | null
    frequencia?: IntFieldUpdateOperationsInput | number
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: BoolFieldUpdateOperationsInput | boolean
    usuario?: usuarioUpdateOneRequiredWithoutPrescricaoNestedInput
    remedio?: remedioUpdateOneRequiredWithoutPrescricaoNestedInput
    historico?: historicoUpdateManyWithoutPrescricaoNestedInput
  }

  export type prescricaoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    idUsuario?: IntFieldUpdateOperationsInput | number
    idRemedio?: IntFieldUpdateOperationsInput | number
    observacao?: NullableStringFieldUpdateOperationsInput | string | null
    frequencia?: IntFieldUpdateOperationsInput | number
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: BoolFieldUpdateOperationsInput | boolean
    historico?: historicoUncheckedUpdateManyWithoutPrescricaoNestedInput
  }

  export type prescricaoCreateManyInput = {
    id?: number
    idUsuario: number
    idRemedio: number
    observacao?: string | null
    frequencia: number
    dataInicio: Date | string
    dataFim: Date | string
    status?: boolean
  }

  export type prescricaoUpdateManyMutationInput = {
    observacao?: NullableStringFieldUpdateOperationsInput | string | null
    frequencia?: IntFieldUpdateOperationsInput | number
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type prescricaoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    idUsuario?: IntFieldUpdateOperationsInput | number
    idRemedio?: IntFieldUpdateOperationsInput | number
    observacao?: NullableStringFieldUpdateOperationsInput | string | null
    frequencia?: IntFieldUpdateOperationsInput | number
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type historicoCreateInput = {
    dataAtual: Date | string
    status?: boolean
    prescricao: prescricaoCreateNestedOneWithoutHistoricoInput
  }

  export type historicoUncheckedCreateInput = {
    id?: number
    idPrescricao: number
    dataAtual: Date | string
    status?: boolean
  }

  export type historicoUpdateInput = {
    dataAtual?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: BoolFieldUpdateOperationsInput | boolean
    prescricao?: prescricaoUpdateOneRequiredWithoutHistoricoNestedInput
  }

  export type historicoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    idPrescricao?: IntFieldUpdateOperationsInput | number
    dataAtual?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type historicoCreateManyInput = {
    id?: number
    idPrescricao: number
    dataAtual: Date | string
    status?: boolean
  }

  export type historicoUpdateManyMutationInput = {
    dataAtual?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type historicoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    idPrescricao?: IntFieldUpdateOperationsInput | number
    dataAtual?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type PrescricaoListRelationFilter = {
    every?: prescricaoWhereInput
    some?: prescricaoWhereInput
    none?: prescricaoWhereInput
  }

  export type prescricaoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usuarioCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    data?: SortOrder
    status?: SortOrder
  }

  export type usuarioAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type usuarioMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    data?: SortOrder
    status?: SortOrder
  }

  export type usuarioMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    data?: SortOrder
    status?: SortOrder
  }

  export type usuarioSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type remedioCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    funcao?: SortOrder
    dosagem?: SortOrder
    status?: SortOrder
  }

  export type remedioAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type remedioMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    funcao?: SortOrder
    dosagem?: SortOrder
    status?: SortOrder
  }

  export type remedioMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    funcao?: SortOrder
    dosagem?: SortOrder
    status?: SortOrder
  }

  export type remedioSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type UsuarioRelationFilter = {
    is?: usuarioWhereInput
    isNot?: usuarioWhereInput
  }

  export type RemedioRelationFilter = {
    is?: remedioWhereInput
    isNot?: remedioWhereInput
  }

  export type HistoricoListRelationFilter = {
    every?: historicoWhereInput
    some?: historicoWhereInput
    none?: historicoWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type historicoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type prescricaoCountOrderByAggregateInput = {
    id?: SortOrder
    idUsuario?: SortOrder
    idRemedio?: SortOrder
    observacao?: SortOrder
    frequencia?: SortOrder
    dataInicio?: SortOrder
    dataFim?: SortOrder
    status?: SortOrder
  }

  export type prescricaoAvgOrderByAggregateInput = {
    id?: SortOrder
    idUsuario?: SortOrder
    idRemedio?: SortOrder
    frequencia?: SortOrder
  }

  export type prescricaoMaxOrderByAggregateInput = {
    id?: SortOrder
    idUsuario?: SortOrder
    idRemedio?: SortOrder
    observacao?: SortOrder
    frequencia?: SortOrder
    dataInicio?: SortOrder
    dataFim?: SortOrder
    status?: SortOrder
  }

  export type prescricaoMinOrderByAggregateInput = {
    id?: SortOrder
    idUsuario?: SortOrder
    idRemedio?: SortOrder
    observacao?: SortOrder
    frequencia?: SortOrder
    dataInicio?: SortOrder
    dataFim?: SortOrder
    status?: SortOrder
  }

  export type prescricaoSumOrderByAggregateInput = {
    id?: SortOrder
    idUsuario?: SortOrder
    idRemedio?: SortOrder
    frequencia?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type PrescricaoRelationFilter = {
    is?: prescricaoWhereInput
    isNot?: prescricaoWhereInput
  }

  export type historicoCountOrderByAggregateInput = {
    id?: SortOrder
    idPrescricao?: SortOrder
    dataAtual?: SortOrder
    status?: SortOrder
  }

  export type historicoAvgOrderByAggregateInput = {
    id?: SortOrder
    idPrescricao?: SortOrder
  }

  export type historicoMaxOrderByAggregateInput = {
    id?: SortOrder
    idPrescricao?: SortOrder
    dataAtual?: SortOrder
    status?: SortOrder
  }

  export type historicoMinOrderByAggregateInput = {
    id?: SortOrder
    idPrescricao?: SortOrder
    dataAtual?: SortOrder
    status?: SortOrder
  }

  export type historicoSumOrderByAggregateInput = {
    id?: SortOrder
    idPrescricao?: SortOrder
  }

  export type prescricaoCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<prescricaoCreateWithoutUsuarioInput, prescricaoUncheckedCreateWithoutUsuarioInput> | prescricaoCreateWithoutUsuarioInput[] | prescricaoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: prescricaoCreateOrConnectWithoutUsuarioInput | prescricaoCreateOrConnectWithoutUsuarioInput[]
    createMany?: prescricaoCreateManyUsuarioInputEnvelope
    connect?: prescricaoWhereUniqueInput | prescricaoWhereUniqueInput[]
  }

  export type prescricaoUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<prescricaoCreateWithoutUsuarioInput, prescricaoUncheckedCreateWithoutUsuarioInput> | prescricaoCreateWithoutUsuarioInput[] | prescricaoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: prescricaoCreateOrConnectWithoutUsuarioInput | prescricaoCreateOrConnectWithoutUsuarioInput[]
    createMany?: prescricaoCreateManyUsuarioInputEnvelope
    connect?: prescricaoWhereUniqueInput | prescricaoWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type prescricaoUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<prescricaoCreateWithoutUsuarioInput, prescricaoUncheckedCreateWithoutUsuarioInput> | prescricaoCreateWithoutUsuarioInput[] | prescricaoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: prescricaoCreateOrConnectWithoutUsuarioInput | prescricaoCreateOrConnectWithoutUsuarioInput[]
    upsert?: prescricaoUpsertWithWhereUniqueWithoutUsuarioInput | prescricaoUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: prescricaoCreateManyUsuarioInputEnvelope
    set?: prescricaoWhereUniqueInput | prescricaoWhereUniqueInput[]
    disconnect?: prescricaoWhereUniqueInput | prescricaoWhereUniqueInput[]
    delete?: prescricaoWhereUniqueInput | prescricaoWhereUniqueInput[]
    connect?: prescricaoWhereUniqueInput | prescricaoWhereUniqueInput[]
    update?: prescricaoUpdateWithWhereUniqueWithoutUsuarioInput | prescricaoUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: prescricaoUpdateManyWithWhereWithoutUsuarioInput | prescricaoUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: prescricaoScalarWhereInput | prescricaoScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type prescricaoUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<prescricaoCreateWithoutUsuarioInput, prescricaoUncheckedCreateWithoutUsuarioInput> | prescricaoCreateWithoutUsuarioInput[] | prescricaoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: prescricaoCreateOrConnectWithoutUsuarioInput | prescricaoCreateOrConnectWithoutUsuarioInput[]
    upsert?: prescricaoUpsertWithWhereUniqueWithoutUsuarioInput | prescricaoUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: prescricaoCreateManyUsuarioInputEnvelope
    set?: prescricaoWhereUniqueInput | prescricaoWhereUniqueInput[]
    disconnect?: prescricaoWhereUniqueInput | prescricaoWhereUniqueInput[]
    delete?: prescricaoWhereUniqueInput | prescricaoWhereUniqueInput[]
    connect?: prescricaoWhereUniqueInput | prescricaoWhereUniqueInput[]
    update?: prescricaoUpdateWithWhereUniqueWithoutUsuarioInput | prescricaoUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: prescricaoUpdateManyWithWhereWithoutUsuarioInput | prescricaoUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: prescricaoScalarWhereInput | prescricaoScalarWhereInput[]
  }

  export type prescricaoCreateNestedManyWithoutRemedioInput = {
    create?: XOR<prescricaoCreateWithoutRemedioInput, prescricaoUncheckedCreateWithoutRemedioInput> | prescricaoCreateWithoutRemedioInput[] | prescricaoUncheckedCreateWithoutRemedioInput[]
    connectOrCreate?: prescricaoCreateOrConnectWithoutRemedioInput | prescricaoCreateOrConnectWithoutRemedioInput[]
    createMany?: prescricaoCreateManyRemedioInputEnvelope
    connect?: prescricaoWhereUniqueInput | prescricaoWhereUniqueInput[]
  }

  export type prescricaoUncheckedCreateNestedManyWithoutRemedioInput = {
    create?: XOR<prescricaoCreateWithoutRemedioInput, prescricaoUncheckedCreateWithoutRemedioInput> | prescricaoCreateWithoutRemedioInput[] | prescricaoUncheckedCreateWithoutRemedioInput[]
    connectOrCreate?: prescricaoCreateOrConnectWithoutRemedioInput | prescricaoCreateOrConnectWithoutRemedioInput[]
    createMany?: prescricaoCreateManyRemedioInputEnvelope
    connect?: prescricaoWhereUniqueInput | prescricaoWhereUniqueInput[]
  }

  export type prescricaoUpdateManyWithoutRemedioNestedInput = {
    create?: XOR<prescricaoCreateWithoutRemedioInput, prescricaoUncheckedCreateWithoutRemedioInput> | prescricaoCreateWithoutRemedioInput[] | prescricaoUncheckedCreateWithoutRemedioInput[]
    connectOrCreate?: prescricaoCreateOrConnectWithoutRemedioInput | prescricaoCreateOrConnectWithoutRemedioInput[]
    upsert?: prescricaoUpsertWithWhereUniqueWithoutRemedioInput | prescricaoUpsertWithWhereUniqueWithoutRemedioInput[]
    createMany?: prescricaoCreateManyRemedioInputEnvelope
    set?: prescricaoWhereUniqueInput | prescricaoWhereUniqueInput[]
    disconnect?: prescricaoWhereUniqueInput | prescricaoWhereUniqueInput[]
    delete?: prescricaoWhereUniqueInput | prescricaoWhereUniqueInput[]
    connect?: prescricaoWhereUniqueInput | prescricaoWhereUniqueInput[]
    update?: prescricaoUpdateWithWhereUniqueWithoutRemedioInput | prescricaoUpdateWithWhereUniqueWithoutRemedioInput[]
    updateMany?: prescricaoUpdateManyWithWhereWithoutRemedioInput | prescricaoUpdateManyWithWhereWithoutRemedioInput[]
    deleteMany?: prescricaoScalarWhereInput | prescricaoScalarWhereInput[]
  }

  export type prescricaoUncheckedUpdateManyWithoutRemedioNestedInput = {
    create?: XOR<prescricaoCreateWithoutRemedioInput, prescricaoUncheckedCreateWithoutRemedioInput> | prescricaoCreateWithoutRemedioInput[] | prescricaoUncheckedCreateWithoutRemedioInput[]
    connectOrCreate?: prescricaoCreateOrConnectWithoutRemedioInput | prescricaoCreateOrConnectWithoutRemedioInput[]
    upsert?: prescricaoUpsertWithWhereUniqueWithoutRemedioInput | prescricaoUpsertWithWhereUniqueWithoutRemedioInput[]
    createMany?: prescricaoCreateManyRemedioInputEnvelope
    set?: prescricaoWhereUniqueInput | prescricaoWhereUniqueInput[]
    disconnect?: prescricaoWhereUniqueInput | prescricaoWhereUniqueInput[]
    delete?: prescricaoWhereUniqueInput | prescricaoWhereUniqueInput[]
    connect?: prescricaoWhereUniqueInput | prescricaoWhereUniqueInput[]
    update?: prescricaoUpdateWithWhereUniqueWithoutRemedioInput | prescricaoUpdateWithWhereUniqueWithoutRemedioInput[]
    updateMany?: prescricaoUpdateManyWithWhereWithoutRemedioInput | prescricaoUpdateManyWithWhereWithoutRemedioInput[]
    deleteMany?: prescricaoScalarWhereInput | prescricaoScalarWhereInput[]
  }

  export type usuarioCreateNestedOneWithoutPrescricaoInput = {
    create?: XOR<usuarioCreateWithoutPrescricaoInput, usuarioUncheckedCreateWithoutPrescricaoInput>
    connectOrCreate?: usuarioCreateOrConnectWithoutPrescricaoInput
    connect?: usuarioWhereUniqueInput
  }

  export type remedioCreateNestedOneWithoutPrescricaoInput = {
    create?: XOR<remedioCreateWithoutPrescricaoInput, remedioUncheckedCreateWithoutPrescricaoInput>
    connectOrCreate?: remedioCreateOrConnectWithoutPrescricaoInput
    connect?: remedioWhereUniqueInput
  }

  export type historicoCreateNestedManyWithoutPrescricaoInput = {
    create?: XOR<historicoCreateWithoutPrescricaoInput, historicoUncheckedCreateWithoutPrescricaoInput> | historicoCreateWithoutPrescricaoInput[] | historicoUncheckedCreateWithoutPrescricaoInput[]
    connectOrCreate?: historicoCreateOrConnectWithoutPrescricaoInput | historicoCreateOrConnectWithoutPrescricaoInput[]
    createMany?: historicoCreateManyPrescricaoInputEnvelope
    connect?: historicoWhereUniqueInput | historicoWhereUniqueInput[]
  }

  export type historicoUncheckedCreateNestedManyWithoutPrescricaoInput = {
    create?: XOR<historicoCreateWithoutPrescricaoInput, historicoUncheckedCreateWithoutPrescricaoInput> | historicoCreateWithoutPrescricaoInput[] | historicoUncheckedCreateWithoutPrescricaoInput[]
    connectOrCreate?: historicoCreateOrConnectWithoutPrescricaoInput | historicoCreateOrConnectWithoutPrescricaoInput[]
    createMany?: historicoCreateManyPrescricaoInputEnvelope
    connect?: historicoWhereUniqueInput | historicoWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type usuarioUpdateOneRequiredWithoutPrescricaoNestedInput = {
    create?: XOR<usuarioCreateWithoutPrescricaoInput, usuarioUncheckedCreateWithoutPrescricaoInput>
    connectOrCreate?: usuarioCreateOrConnectWithoutPrescricaoInput
    upsert?: usuarioUpsertWithoutPrescricaoInput
    connect?: usuarioWhereUniqueInput
    update?: XOR<XOR<usuarioUpdateToOneWithWhereWithoutPrescricaoInput, usuarioUpdateWithoutPrescricaoInput>, usuarioUncheckedUpdateWithoutPrescricaoInput>
  }

  export type remedioUpdateOneRequiredWithoutPrescricaoNestedInput = {
    create?: XOR<remedioCreateWithoutPrescricaoInput, remedioUncheckedCreateWithoutPrescricaoInput>
    connectOrCreate?: remedioCreateOrConnectWithoutPrescricaoInput
    upsert?: remedioUpsertWithoutPrescricaoInput
    connect?: remedioWhereUniqueInput
    update?: XOR<XOR<remedioUpdateToOneWithWhereWithoutPrescricaoInput, remedioUpdateWithoutPrescricaoInput>, remedioUncheckedUpdateWithoutPrescricaoInput>
  }

  export type historicoUpdateManyWithoutPrescricaoNestedInput = {
    create?: XOR<historicoCreateWithoutPrescricaoInput, historicoUncheckedCreateWithoutPrescricaoInput> | historicoCreateWithoutPrescricaoInput[] | historicoUncheckedCreateWithoutPrescricaoInput[]
    connectOrCreate?: historicoCreateOrConnectWithoutPrescricaoInput | historicoCreateOrConnectWithoutPrescricaoInput[]
    upsert?: historicoUpsertWithWhereUniqueWithoutPrescricaoInput | historicoUpsertWithWhereUniqueWithoutPrescricaoInput[]
    createMany?: historicoCreateManyPrescricaoInputEnvelope
    set?: historicoWhereUniqueInput | historicoWhereUniqueInput[]
    disconnect?: historicoWhereUniqueInput | historicoWhereUniqueInput[]
    delete?: historicoWhereUniqueInput | historicoWhereUniqueInput[]
    connect?: historicoWhereUniqueInput | historicoWhereUniqueInput[]
    update?: historicoUpdateWithWhereUniqueWithoutPrescricaoInput | historicoUpdateWithWhereUniqueWithoutPrescricaoInput[]
    updateMany?: historicoUpdateManyWithWhereWithoutPrescricaoInput | historicoUpdateManyWithWhereWithoutPrescricaoInput[]
    deleteMany?: historicoScalarWhereInput | historicoScalarWhereInput[]
  }

  export type historicoUncheckedUpdateManyWithoutPrescricaoNestedInput = {
    create?: XOR<historicoCreateWithoutPrescricaoInput, historicoUncheckedCreateWithoutPrescricaoInput> | historicoCreateWithoutPrescricaoInput[] | historicoUncheckedCreateWithoutPrescricaoInput[]
    connectOrCreate?: historicoCreateOrConnectWithoutPrescricaoInput | historicoCreateOrConnectWithoutPrescricaoInput[]
    upsert?: historicoUpsertWithWhereUniqueWithoutPrescricaoInput | historicoUpsertWithWhereUniqueWithoutPrescricaoInput[]
    createMany?: historicoCreateManyPrescricaoInputEnvelope
    set?: historicoWhereUniqueInput | historicoWhereUniqueInput[]
    disconnect?: historicoWhereUniqueInput | historicoWhereUniqueInput[]
    delete?: historicoWhereUniqueInput | historicoWhereUniqueInput[]
    connect?: historicoWhereUniqueInput | historicoWhereUniqueInput[]
    update?: historicoUpdateWithWhereUniqueWithoutPrescricaoInput | historicoUpdateWithWhereUniqueWithoutPrescricaoInput[]
    updateMany?: historicoUpdateManyWithWhereWithoutPrescricaoInput | historicoUpdateManyWithWhereWithoutPrescricaoInput[]
    deleteMany?: historicoScalarWhereInput | historicoScalarWhereInput[]
  }

  export type prescricaoCreateNestedOneWithoutHistoricoInput = {
    create?: XOR<prescricaoCreateWithoutHistoricoInput, prescricaoUncheckedCreateWithoutHistoricoInput>
    connectOrCreate?: prescricaoCreateOrConnectWithoutHistoricoInput
    connect?: prescricaoWhereUniqueInput
  }

  export type prescricaoUpdateOneRequiredWithoutHistoricoNestedInput = {
    create?: XOR<prescricaoCreateWithoutHistoricoInput, prescricaoUncheckedCreateWithoutHistoricoInput>
    connectOrCreate?: prescricaoCreateOrConnectWithoutHistoricoInput
    upsert?: prescricaoUpsertWithoutHistoricoInput
    connect?: prescricaoWhereUniqueInput
    update?: XOR<XOR<prescricaoUpdateToOneWithWhereWithoutHistoricoInput, prescricaoUpdateWithoutHistoricoInput>, prescricaoUncheckedUpdateWithoutHistoricoInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type prescricaoCreateWithoutUsuarioInput = {
    observacao?: string | null
    frequencia: number
    dataInicio: Date | string
    dataFim: Date | string
    status?: boolean
    remedio: remedioCreateNestedOneWithoutPrescricaoInput
    historico?: historicoCreateNestedManyWithoutPrescricaoInput
  }

  export type prescricaoUncheckedCreateWithoutUsuarioInput = {
    id?: number
    idRemedio: number
    observacao?: string | null
    frequencia: number
    dataInicio: Date | string
    dataFim: Date | string
    status?: boolean
    historico?: historicoUncheckedCreateNestedManyWithoutPrescricaoInput
  }

  export type prescricaoCreateOrConnectWithoutUsuarioInput = {
    where: prescricaoWhereUniqueInput
    create: XOR<prescricaoCreateWithoutUsuarioInput, prescricaoUncheckedCreateWithoutUsuarioInput>
  }

  export type prescricaoCreateManyUsuarioInputEnvelope = {
    data: prescricaoCreateManyUsuarioInput | prescricaoCreateManyUsuarioInput[]
  }

  export type prescricaoUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: prescricaoWhereUniqueInput
    update: XOR<prescricaoUpdateWithoutUsuarioInput, prescricaoUncheckedUpdateWithoutUsuarioInput>
    create: XOR<prescricaoCreateWithoutUsuarioInput, prescricaoUncheckedCreateWithoutUsuarioInput>
  }

  export type prescricaoUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: prescricaoWhereUniqueInput
    data: XOR<prescricaoUpdateWithoutUsuarioInput, prescricaoUncheckedUpdateWithoutUsuarioInput>
  }

  export type prescricaoUpdateManyWithWhereWithoutUsuarioInput = {
    where: prescricaoScalarWhereInput
    data: XOR<prescricaoUpdateManyMutationInput, prescricaoUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type prescricaoScalarWhereInput = {
    AND?: prescricaoScalarWhereInput | prescricaoScalarWhereInput[]
    OR?: prescricaoScalarWhereInput[]
    NOT?: prescricaoScalarWhereInput | prescricaoScalarWhereInput[]
    id?: IntFilter<"prescricao"> | number
    idUsuario?: IntFilter<"prescricao"> | number
    idRemedio?: IntFilter<"prescricao"> | number
    observacao?: StringNullableFilter<"prescricao"> | string | null
    frequencia?: IntFilter<"prescricao"> | number
    dataInicio?: DateTimeFilter<"prescricao"> | Date | string
    dataFim?: DateTimeFilter<"prescricao"> | Date | string
    status?: BoolFilter<"prescricao"> | boolean
  }

  export type prescricaoCreateWithoutRemedioInput = {
    observacao?: string | null
    frequencia: number
    dataInicio: Date | string
    dataFim: Date | string
    status?: boolean
    usuario: usuarioCreateNestedOneWithoutPrescricaoInput
    historico?: historicoCreateNestedManyWithoutPrescricaoInput
  }

  export type prescricaoUncheckedCreateWithoutRemedioInput = {
    id?: number
    idUsuario: number
    observacao?: string | null
    frequencia: number
    dataInicio: Date | string
    dataFim: Date | string
    status?: boolean
    historico?: historicoUncheckedCreateNestedManyWithoutPrescricaoInput
  }

  export type prescricaoCreateOrConnectWithoutRemedioInput = {
    where: prescricaoWhereUniqueInput
    create: XOR<prescricaoCreateWithoutRemedioInput, prescricaoUncheckedCreateWithoutRemedioInput>
  }

  export type prescricaoCreateManyRemedioInputEnvelope = {
    data: prescricaoCreateManyRemedioInput | prescricaoCreateManyRemedioInput[]
  }

  export type prescricaoUpsertWithWhereUniqueWithoutRemedioInput = {
    where: prescricaoWhereUniqueInput
    update: XOR<prescricaoUpdateWithoutRemedioInput, prescricaoUncheckedUpdateWithoutRemedioInput>
    create: XOR<prescricaoCreateWithoutRemedioInput, prescricaoUncheckedCreateWithoutRemedioInput>
  }

  export type prescricaoUpdateWithWhereUniqueWithoutRemedioInput = {
    where: prescricaoWhereUniqueInput
    data: XOR<prescricaoUpdateWithoutRemedioInput, prescricaoUncheckedUpdateWithoutRemedioInput>
  }

  export type prescricaoUpdateManyWithWhereWithoutRemedioInput = {
    where: prescricaoScalarWhereInput
    data: XOR<prescricaoUpdateManyMutationInput, prescricaoUncheckedUpdateManyWithoutRemedioInput>
  }

  export type usuarioCreateWithoutPrescricaoInput = {
    nome: string
    email: string
    senha: string
    data: Date | string
    status?: boolean
  }

  export type usuarioUncheckedCreateWithoutPrescricaoInput = {
    id?: number
    nome: string
    email: string
    senha: string
    data: Date | string
    status?: boolean
  }

  export type usuarioCreateOrConnectWithoutPrescricaoInput = {
    where: usuarioWhereUniqueInput
    create: XOR<usuarioCreateWithoutPrescricaoInput, usuarioUncheckedCreateWithoutPrescricaoInput>
  }

  export type remedioCreateWithoutPrescricaoInput = {
    nome: string
    funcao: string
    dosagem: string
    status?: boolean
  }

  export type remedioUncheckedCreateWithoutPrescricaoInput = {
    id?: number
    nome: string
    funcao: string
    dosagem: string
    status?: boolean
  }

  export type remedioCreateOrConnectWithoutPrescricaoInput = {
    where: remedioWhereUniqueInput
    create: XOR<remedioCreateWithoutPrescricaoInput, remedioUncheckedCreateWithoutPrescricaoInput>
  }

  export type historicoCreateWithoutPrescricaoInput = {
    dataAtual: Date | string
    status?: boolean
  }

  export type historicoUncheckedCreateWithoutPrescricaoInput = {
    id?: number
    dataAtual: Date | string
    status?: boolean
  }

  export type historicoCreateOrConnectWithoutPrescricaoInput = {
    where: historicoWhereUniqueInput
    create: XOR<historicoCreateWithoutPrescricaoInput, historicoUncheckedCreateWithoutPrescricaoInput>
  }

  export type historicoCreateManyPrescricaoInputEnvelope = {
    data: historicoCreateManyPrescricaoInput | historicoCreateManyPrescricaoInput[]
  }

  export type usuarioUpsertWithoutPrescricaoInput = {
    update: XOR<usuarioUpdateWithoutPrescricaoInput, usuarioUncheckedUpdateWithoutPrescricaoInput>
    create: XOR<usuarioCreateWithoutPrescricaoInput, usuarioUncheckedCreateWithoutPrescricaoInput>
    where?: usuarioWhereInput
  }

  export type usuarioUpdateToOneWithWhereWithoutPrescricaoInput = {
    where?: usuarioWhereInput
    data: XOR<usuarioUpdateWithoutPrescricaoInput, usuarioUncheckedUpdateWithoutPrescricaoInput>
  }

  export type usuarioUpdateWithoutPrescricaoInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type usuarioUncheckedUpdateWithoutPrescricaoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type remedioUpsertWithoutPrescricaoInput = {
    update: XOR<remedioUpdateWithoutPrescricaoInput, remedioUncheckedUpdateWithoutPrescricaoInput>
    create: XOR<remedioCreateWithoutPrescricaoInput, remedioUncheckedCreateWithoutPrescricaoInput>
    where?: remedioWhereInput
  }

  export type remedioUpdateToOneWithWhereWithoutPrescricaoInput = {
    where?: remedioWhereInput
    data: XOR<remedioUpdateWithoutPrescricaoInput, remedioUncheckedUpdateWithoutPrescricaoInput>
  }

  export type remedioUpdateWithoutPrescricaoInput = {
    nome?: StringFieldUpdateOperationsInput | string
    funcao?: StringFieldUpdateOperationsInput | string
    dosagem?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type remedioUncheckedUpdateWithoutPrescricaoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    funcao?: StringFieldUpdateOperationsInput | string
    dosagem?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type historicoUpsertWithWhereUniqueWithoutPrescricaoInput = {
    where: historicoWhereUniqueInput
    update: XOR<historicoUpdateWithoutPrescricaoInput, historicoUncheckedUpdateWithoutPrescricaoInput>
    create: XOR<historicoCreateWithoutPrescricaoInput, historicoUncheckedCreateWithoutPrescricaoInput>
  }

  export type historicoUpdateWithWhereUniqueWithoutPrescricaoInput = {
    where: historicoWhereUniqueInput
    data: XOR<historicoUpdateWithoutPrescricaoInput, historicoUncheckedUpdateWithoutPrescricaoInput>
  }

  export type historicoUpdateManyWithWhereWithoutPrescricaoInput = {
    where: historicoScalarWhereInput
    data: XOR<historicoUpdateManyMutationInput, historicoUncheckedUpdateManyWithoutPrescricaoInput>
  }

  export type historicoScalarWhereInput = {
    AND?: historicoScalarWhereInput | historicoScalarWhereInput[]
    OR?: historicoScalarWhereInput[]
    NOT?: historicoScalarWhereInput | historicoScalarWhereInput[]
    id?: IntFilter<"historico"> | number
    idPrescricao?: IntFilter<"historico"> | number
    dataAtual?: DateTimeFilter<"historico"> | Date | string
    status?: BoolFilter<"historico"> | boolean
  }

  export type prescricaoCreateWithoutHistoricoInput = {
    observacao?: string | null
    frequencia: number
    dataInicio: Date | string
    dataFim: Date | string
    status?: boolean
    usuario: usuarioCreateNestedOneWithoutPrescricaoInput
    remedio: remedioCreateNestedOneWithoutPrescricaoInput
  }

  export type prescricaoUncheckedCreateWithoutHistoricoInput = {
    id?: number
    idUsuario: number
    idRemedio: number
    observacao?: string | null
    frequencia: number
    dataInicio: Date | string
    dataFim: Date | string
    status?: boolean
  }

  export type prescricaoCreateOrConnectWithoutHistoricoInput = {
    where: prescricaoWhereUniqueInput
    create: XOR<prescricaoCreateWithoutHistoricoInput, prescricaoUncheckedCreateWithoutHistoricoInput>
  }

  export type prescricaoUpsertWithoutHistoricoInput = {
    update: XOR<prescricaoUpdateWithoutHistoricoInput, prescricaoUncheckedUpdateWithoutHistoricoInput>
    create: XOR<prescricaoCreateWithoutHistoricoInput, prescricaoUncheckedCreateWithoutHistoricoInput>
    where?: prescricaoWhereInput
  }

  export type prescricaoUpdateToOneWithWhereWithoutHistoricoInput = {
    where?: prescricaoWhereInput
    data: XOR<prescricaoUpdateWithoutHistoricoInput, prescricaoUncheckedUpdateWithoutHistoricoInput>
  }

  export type prescricaoUpdateWithoutHistoricoInput = {
    observacao?: NullableStringFieldUpdateOperationsInput | string | null
    frequencia?: IntFieldUpdateOperationsInput | number
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: BoolFieldUpdateOperationsInput | boolean
    usuario?: usuarioUpdateOneRequiredWithoutPrescricaoNestedInput
    remedio?: remedioUpdateOneRequiredWithoutPrescricaoNestedInput
  }

  export type prescricaoUncheckedUpdateWithoutHistoricoInput = {
    id?: IntFieldUpdateOperationsInput | number
    idUsuario?: IntFieldUpdateOperationsInput | number
    idRemedio?: IntFieldUpdateOperationsInput | number
    observacao?: NullableStringFieldUpdateOperationsInput | string | null
    frequencia?: IntFieldUpdateOperationsInput | number
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type prescricaoCreateManyUsuarioInput = {
    id?: number
    idRemedio: number
    observacao?: string | null
    frequencia: number
    dataInicio: Date | string
    dataFim: Date | string
    status?: boolean
  }

  export type prescricaoUpdateWithoutUsuarioInput = {
    observacao?: NullableStringFieldUpdateOperationsInput | string | null
    frequencia?: IntFieldUpdateOperationsInput | number
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: BoolFieldUpdateOperationsInput | boolean
    remedio?: remedioUpdateOneRequiredWithoutPrescricaoNestedInput
    historico?: historicoUpdateManyWithoutPrescricaoNestedInput
  }

  export type prescricaoUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    idRemedio?: IntFieldUpdateOperationsInput | number
    observacao?: NullableStringFieldUpdateOperationsInput | string | null
    frequencia?: IntFieldUpdateOperationsInput | number
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: BoolFieldUpdateOperationsInput | boolean
    historico?: historicoUncheckedUpdateManyWithoutPrescricaoNestedInput
  }

  export type prescricaoUncheckedUpdateManyWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    idRemedio?: IntFieldUpdateOperationsInput | number
    observacao?: NullableStringFieldUpdateOperationsInput | string | null
    frequencia?: IntFieldUpdateOperationsInput | number
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type prescricaoCreateManyRemedioInput = {
    id?: number
    idUsuario: number
    observacao?: string | null
    frequencia: number
    dataInicio: Date | string
    dataFim: Date | string
    status?: boolean
  }

  export type prescricaoUpdateWithoutRemedioInput = {
    observacao?: NullableStringFieldUpdateOperationsInput | string | null
    frequencia?: IntFieldUpdateOperationsInput | number
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: BoolFieldUpdateOperationsInput | boolean
    usuario?: usuarioUpdateOneRequiredWithoutPrescricaoNestedInput
    historico?: historicoUpdateManyWithoutPrescricaoNestedInput
  }

  export type prescricaoUncheckedUpdateWithoutRemedioInput = {
    id?: IntFieldUpdateOperationsInput | number
    idUsuario?: IntFieldUpdateOperationsInput | number
    observacao?: NullableStringFieldUpdateOperationsInput | string | null
    frequencia?: IntFieldUpdateOperationsInput | number
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: BoolFieldUpdateOperationsInput | boolean
    historico?: historicoUncheckedUpdateManyWithoutPrescricaoNestedInput
  }

  export type prescricaoUncheckedUpdateManyWithoutRemedioInput = {
    id?: IntFieldUpdateOperationsInput | number
    idUsuario?: IntFieldUpdateOperationsInput | number
    observacao?: NullableStringFieldUpdateOperationsInput | string | null
    frequencia?: IntFieldUpdateOperationsInput | number
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type historicoCreateManyPrescricaoInput = {
    id?: number
    dataAtual: Date | string
    status?: boolean
  }

  export type historicoUpdateWithoutPrescricaoInput = {
    dataAtual?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type historicoUncheckedUpdateWithoutPrescricaoInput = {
    id?: IntFieldUpdateOperationsInput | number
    dataAtual?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type historicoUncheckedUpdateManyWithoutPrescricaoInput = {
    id?: IntFieldUpdateOperationsInput | number
    dataAtual?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UsuarioCountOutputTypeDefaultArgs instead
     */
    export type UsuarioCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsuarioCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RemedioCountOutputTypeDefaultArgs instead
     */
    export type RemedioCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RemedioCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PrescricaoCountOutputTypeDefaultArgs instead
     */
    export type PrescricaoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PrescricaoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use usuarioDefaultArgs instead
     */
    export type usuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = usuarioDefaultArgs<ExtArgs>
    /**
     * @deprecated Use remedioDefaultArgs instead
     */
    export type remedioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = remedioDefaultArgs<ExtArgs>
    /**
     * @deprecated Use prescricaoDefaultArgs instead
     */
    export type prescricaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = prescricaoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use historicoDefaultArgs instead
     */
    export type historicoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = historicoDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}